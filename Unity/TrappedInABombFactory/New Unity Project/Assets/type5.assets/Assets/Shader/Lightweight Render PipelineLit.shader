Shader "Lightweight Render Pipeline/Lit" {
	Properties {
		[HideInInspector] _WorkflowMode ("WorkflowMode", Float) = 1
		[MainColor] _BaseColor ("Color", Vector) = (0.5,0.5,0.5,1)
		[MainTexture] _BaseMap ("Albedo", 2D) = "white" {}
		_Cutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
		_Smoothness ("Smoothness", Range(0, 1)) = 0.5
		_GlossMapScale ("Smoothness Scale", Range(0, 1)) = 1
		_SmoothnessTextureChannel ("Smoothness texture channel", Float) = 0
		[Gamma] _Metallic ("Metallic", Range(0, 1)) = 0
		_MetallicGlossMap ("Metallic", 2D) = "white" {}
		_SpecColor ("Specular", Vector) = (0.2,0.2,0.2,1)
		_SpecGlossMap ("Specular", 2D) = "white" {}
		[ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
		[ToggleOff] _EnvironmentReflections ("Environment Reflections", Float) = 1
		_BumpScale ("Scale", Float) = 1
		_BumpMap ("Normal Map", 2D) = "bump" {}
		_OcclusionStrength ("Strength", Range(0, 1)) = 1
		_OcclusionMap ("Occlusion", 2D) = "white" {}
		_EmissionColor ("Color", Vector) = (0,0,0,1)
		_EmissionMap ("Emission", 2D) = "white" {}
		[HideInInspector] _Surface ("__surface", Float) = 0
		[HideInInspector] _Blend ("__blend", Float) = 0
		[HideInInspector] _AlphaClip ("__clip", Float) = 0
		[HideInInspector] _SrcBlend ("__src", Float) = 1
		[HideInInspector] _DstBlend ("__dst", Float) = 0
		[HideInInspector] _ZWrite ("__zw", Float) = 1
		[HideInInspector] _Cull ("__cull", Float) = 2
		_ReceiveShadows ("Receive Shadows", Float) = 1
		[HideInInspector] _QueueOffset ("Queue offset", Float) = 0
		[HideInInspector] _MainTex ("BaseMap", 2D) = "white" {}
		[HideInInspector] _Color ("Base Color", Vector) = (0.5,0.5,0.5,1)
		[HideInInspector] _GlossMapScale ("Smoothness", Float) = 0
		[HideInInspector] _Glossiness ("Smoothness", Float) = 0
		[HideInInspector] _GlossyReflections ("EnvironmentReflections", Float) = 0
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
		Pass {
			Name "ForwardLit"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "LightweightForward" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			Cull Off
			GpuProgramID 57900
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat1);
					    u_xlat0.y = dot(unity_SHAg, u_xlat1);
					    u_xlat0.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[211];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat1);
					    u_xlat0.y = dot(unity_SHAg, u_xlat1);
					    u_xlat0.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[195];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[195];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat1);
					    u_xlat0.y = dot(unity_SHAg, u_xlat1);
					    u_xlat0.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[211];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat1);
					    u_xlat0.y = dot(unity_SHAg, u_xlat1);
					    u_xlat0.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[195];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[195];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[7];
						vec4 unity_LightmapST;
						vec4 unused_0_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat4.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat4.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat4.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat4.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat4.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat4.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat4.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat4.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat2.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat2.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_15[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[94];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_11[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_15[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[94];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_11[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_15[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[94];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_11[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_11[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_13[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_15[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[94];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_11[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat9;
					vec2 u_xlat13;
					float u_xlat15;
					int u_xlati15;
					int u_xlati17;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlatb8 = u_xlat3.x<2.0;
					        u_xlat13.xy = (bool(u_xlatb8)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat4.x = u_xlat3.x + -2.0;
					        u_xlat3.x = (u_xlatb8) ? u_xlat3.x : u_xlat4.x;
					        u_xlatb3 = u_xlat3.x<1.0;
					        u_xlat3.x = (u_xlatb3) ? u_xlat13.x : u_xlat13.y;
					        u_xlati3 = int(u_xlat3.x);
					        u_xlat8.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati3].xyz;
					        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					        u_xlat4.x = max(u_xlat4.x, 6.10351563e-05);
					        u_xlat9 = inversesqrt(u_xlat4.x);
					        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);
					        u_xlat9 = float(1.0) / u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;
					        u_xlat4.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					        u_xlat4.x = max(u_xlat4.x, 0.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat4.x = u_xlat4.x * u_xlat9;
					        u_xlat9 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);
					        u_xlat9 = u_xlat9 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
					        u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					        u_xlat9 = u_xlat9 * u_xlat9;
					        u_xlat4.x = u_xlat9 * u_xlat4.x;
					        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;
					        u_xlat3.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * u_xlat3.xxx + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat1.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat1);
					    u_xlat2.y = dot(unity_SHAg, u_xlat1);
					    u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_13[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_15[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_17[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[78];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_13[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					int u_xlati4;
					vec2 u_xlat8;
					float u_xlat15;
					int u_xlati15;
					int u_xlati16;
					float u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					float u_xlat18;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1) / 4][(u_xlati15 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati15 / 4][u_xlati15 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 2) / 4][(u_xlati15 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati15 + 3) / 4][(u_xlati15 + 3) % 4];
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlati15 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati15].xyz;
					    u_xlat15 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati15 = int(u_xlat15);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati15 ; u_xlati_loop_1++)
					    {
					        u_xlat17 = float(u_xlati_loop_1);
					        u_xlatb3 = u_xlat17<2.0;
					        u_xlat8.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat18 = u_xlat17 + -2.0;
					        u_xlat17 = (u_xlatb3) ? u_xlat17 : u_xlat18;
					        u_xlatb17 = u_xlat17<1.0;
					        u_xlat17 = (u_xlatb17) ? u_xlat8.x : u_xlat8.y;
					        u_xlati17 = int(u_xlat17);
					        u_xlat3.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati17].xyz;
					        u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat18 = max(u_xlat18, 6.10351563e-05);
					        u_xlat4.x = inversesqrt(u_xlat18);
					        u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xxx;
					        u_xlat4.x = float(1.0) / u_xlat18;
					        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati17].x;
					        u_xlat18 = (-u_xlat18) * u_xlat18 + 1.0;
					        u_xlat18 = max(u_xlat18, 0.0);
					        u_xlat18 = u_xlat18 * u_xlat18;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.x = dot(_AdditionalLightsSpotDir[u_xlati17].xyz, u_xlat3.xyz);
					        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati17].z + _AdditionalLightsAttenuation[u_xlati17].w;
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat4.x = u_xlat4.x * u_xlat4.x;
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlati4 = int(_AdditionalLightsOcclusionProbes[u_xlati17].x);
					        u_xlat4.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati4]);
					        u_xlat4.x = max(u_xlat4.x, _AdditionalLightsOcclusionProbes[u_xlati17].y);
					        u_xlat18 = u_xlat18 * u_xlat4.x;
					        u_xlat4.xyz = vec3(u_xlat18) * _AdditionalLightsColor[u_xlati17].xyz;
					        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
					        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
					        u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat17) + u_xlat2.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat2.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat2 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat2 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat2;
					    vs_TEXCOORD7 = u_xlat0 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_0_2[45];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_4[43];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_6[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[153];
						mat4x4 _MainLightWorldToShadow[5];
						vec4 unused_0_2[113];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * _MainLightWorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = _MainLightWorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _MainLightWorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = u_xlat1 + _MainLightWorldToShadow[3 / 4][3 % 4];
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat4.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat4.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat4.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati0].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat2.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1) / 4][(u_xlati0 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0 / 4][u_xlati0 % 4] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2) / 4][(u_xlati0 + 2) % 4] * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati0 + 3) / 4][(u_xlati0 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_12[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_14[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec4 _ProjectionParams;
						vec4 unused_0_11[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_12[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_14[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec4 _ProjectionParams;
						vec4 unused_0_11[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_12[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_14[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec4 _ProjectionParams;
						vec4 unused_0_11[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_12[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_14[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[36];
						vec4 _ProjectionParams;
						vec4 unused_0_11[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5[5];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat16;
					float u_xlat18;
					int u_xlati18;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat4.x = float(u_xlati_loop_1);
					        u_xlatb10 = u_xlat4.x<2.0;
					        u_xlat16.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat5.x = u_xlat4.x + -2.0;
					        u_xlat4.x = (u_xlatb10) ? u_xlat4.x : u_xlat5.x;
					        u_xlatb4 = u_xlat4.x<1.0;
					        u_xlat4.x = (u_xlatb4) ? u_xlat16.x : u_xlat16.y;
					        u_xlati4 = int(u_xlat4.x);
					        u_xlat10.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati4].xyz;
					        u_xlat5.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);
					        u_xlat11 = inversesqrt(u_xlat5.x);
					        u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat11);
					        u_xlat11 = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x;
					        u_xlat5.x = (-u_xlat5.x) * u_xlat5.x + 1.0;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat11;
					        u_xlat11 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat10.xyz);
					        u_xlat11 = u_xlat11 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;
					        u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					        u_xlat11 = u_xlat11 * u_xlat11;
					        u_xlat5.x = u_xlat11 * u_xlat5.x;
					        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;
					        u_xlat4.x = dot(u_xlat2.xyz, u_xlat10.xyz);
					        u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * u_xlat4.xxx + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat2.w = 1.0;
					    u_xlat0.x = dot(unity_SHAr, u_xlat2);
					    u_xlat0.y = dot(unity_SHAg, u_xlat2);
					    u_xlat0.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_14[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_16[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_3[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_11[20];
						vec4 _ProjectionParams;
						vec4 unused_0_13[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_5;
						vec4 unity_ProbesOcclusion;
						vec4 unused_1_7;
						vec4 unity_LightmapST;
						vec4 unused_1_9[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					int u_xlati5;
					float u_xlat6;
					vec2 u_xlat10;
					float u_xlat18;
					int u_xlati18;
					int u_xlati20;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1) / 4][(u_xlati18 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati18 / 4][u_xlati18 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 2) / 4][(u_xlati18 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_StereoMatrixVP[(u_xlati18 + 3) / 4][(u_xlati18 + 3) % 4];
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati18].xyz;
					    u_xlat18 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati18 = int(u_xlat18);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)
					    {
					        u_xlat21 = float(u_xlati_loop_1);
					        u_xlatb4 = u_xlat21<2.0;
					        u_xlat10.xy = (bool(u_xlatb4)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat22 = u_xlat21 + -2.0;
					        u_xlat21 = (u_xlatb4) ? u_xlat21 : u_xlat22;
					        u_xlatb21 = u_xlat21<1.0;
					        u_xlat21 = (u_xlatb21) ? u_xlat10.x : u_xlat10.y;
					        u_xlati21 = int(u_xlat21);
					        u_xlat4.xyz = (-u_xlat0.xyz) + _AdditionalLightsPosition[u_xlati21].xyz;
					        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat22 = max(u_xlat22, 6.10351563e-05);
					        u_xlat5.x = inversesqrt(u_xlat22);
					        u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xxx;
					        u_xlat5.x = float(1.0) / u_xlat22;
					        u_xlat22 = u_xlat22 * _AdditionalLightsAttenuation[u_xlati21].x;
					        u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					        u_xlat22 = max(u_xlat22, 0.0);
					        u_xlat22 = u_xlat22 * u_xlat22;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.x = dot(_AdditionalLightsSpotDir[u_xlati21].xyz, u_xlat4.xyz);
					        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati21].z + _AdditionalLightsAttenuation[u_xlati21].w;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlati5 = int(_AdditionalLightsOcclusionProbes[u_xlati21].x);
					        u_xlat5.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati5]);
					        u_xlat5.x = max(u_xlat5.x, _AdditionalLightsOcclusionProbes[u_xlati21].y);
					        u_xlat22 = u_xlat22 * u_xlat5.x;
					        u_xlat5.xyz = vec3(u_xlat22) * _AdditionalLightsColor[u_xlati21].xyz;
					        u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
					        u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					        u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat21) + u_xlat3.xyz;
					    }
					    vs_TEXCOORD6.yzw = u_xlat3.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat6 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.x = 0.0;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[9];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati12].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1) / 4][(u_xlati12 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati12 / 4][u_xlati12 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 2) / 4][(u_xlati12 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati12 + 3) / 4][(u_xlati12 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_0_3[44];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_5[160];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[95];
						vec4 _ProjectionParams;
						vec4 unused_0_2[174];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[7];
						vec4 unity_LightmapST;
						vec4 unused_1_4[8];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos[2];
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlati6 = unity_StereoEyeIndex;
					    vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos[u_xlati6].xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.w = u_xlat1.x * 0.5;
					    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    gl_Position = u_xlat0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat15;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat10_0 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = max(u_xlat10_0.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat1.xyz = (-u_xlat10_0.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _MainLightShadowData.xxx * u_xlat1.xyz + u_xlat10_0.xyz;
					    u_xlat0.xyz = min(u_xlat10_0.xyz, u_xlat1.xyz);
					    u_xlat21 = (-_Smoothness) + 1.0;
					    u_xlat1.x = (-u_xlat21) * 0.699999988 + 1.70000005;
					    u_xlat1.x = u_xlat21 * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat1.x * 6.0;
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat8.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat23 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD3.xyz;
					    u_xlat23 = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat23)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat1.x);
					    u_xlat16_1 = u_xlat10_4.w + -1.0;
					    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat16_1 + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat10_4.xyz * u_xlat1.xxx;
					    u_xlat4.xy = vec2(u_xlat21) * vec2(u_xlat21) + vec2(-1.0, 1.0);
					    u_xlat1.x = float(1.0) / u_xlat4.y;
					    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat1.x = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat1.x) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat8.xyz;
					    u_xlat1.w = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat1.xz = u_xlat1.xw * u_xlat1.xw;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = max(u_xlat1.z, 0.100000001);
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat21 * 4.0 + 2.0;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat21 = u_xlat21 / u_xlat1.x;
					    u_xlat1.xzw = vec3(u_xlat21) * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat8.x * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat1.xzw * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat15;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat10_0 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = max(u_xlat10_0.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat1.xyz = (-u_xlat10_0.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _MainLightShadowData.xxx * u_xlat1.xyz + u_xlat10_0.xyz;
					    u_xlat0.xyz = min(u_xlat10_0.xyz, u_xlat1.xyz);
					    u_xlat21 = (-_Smoothness) + 1.0;
					    u_xlat1.x = (-u_xlat21) * 0.699999988 + 1.70000005;
					    u_xlat1.x = u_xlat21 * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat1.x * 6.0;
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat8.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat23 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD3.xyz;
					    u_xlat23 = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat23)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat1.x);
					    u_xlat16_1 = u_xlat10_4.w + -1.0;
					    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat16_1 + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat10_4.xyz * u_xlat1.xxx;
					    u_xlat4.xy = vec2(u_xlat21) * vec2(u_xlat21) + vec2(-1.0, 1.0);
					    u_xlat1.x = float(1.0) / u_xlat4.y;
					    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat1.x = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat1.x) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat8.xyz;
					    u_xlat1.w = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat1.xz = u_xlat1.xw * u_xlat1.xw;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = max(u_xlat1.z, 0.100000001);
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat21 * 4.0 + 2.0;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat21 = u_xlat21 / u_xlat1.x;
					    u_xlat1.xzw = vec3(u_xlat21) * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat8.x * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat1.xzw * u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat16.xxx + _MainLightPosition.xyz;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat16.xxx) + (-u_xlat1.xyz);
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_16 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat25 = u_xlat25 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_16);
					    u_xlat7.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat2.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.y = clamp(u_xlat16.y, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16.xy = u_xlat16.xy * u_xlat16.xy;
					    u_xlat8.x = u_xlat16.y * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat0.y = u_xlat16.x * u_xlat8.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat24 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat24 = u_xlat25 * u_xlat24;
					    u_xlat2.xyz = vec3(u_xlat24) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat16.xxx + _MainLightPosition.xyz;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat16.xxx) + (-u_xlat1.xyz);
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_16 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat25 = u_xlat25 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_16);
					    u_xlat7.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat2.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.y = clamp(u_xlat16.y, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16.xy = u_xlat16.xy * u_xlat16.xy;
					    u_xlat8.x = u_xlat16.y * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat0.y = u_xlat16.x * u_xlat8.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat24 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat24 = u_xlat25 * u_xlat24;
					    u_xlat2.xyz = vec3(u_xlat24) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat22 = u_xlat22 * unity_LightData.z;
					    u_xlat2.xyz = vec3(u_xlat22) * _MainLightColor.xyz;
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat15;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat10_0 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = max(u_xlat10_0.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat1.xyz = (-u_xlat10_0.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _MainLightShadowData.xxx * u_xlat1.xyz + u_xlat10_0.xyz;
					    u_xlat0.xyz = min(u_xlat10_0.xyz, u_xlat1.xyz);
					    u_xlat21 = (-_Smoothness) + 1.0;
					    u_xlat1.x = (-u_xlat21) * 0.699999988 + 1.70000005;
					    u_xlat1.x = u_xlat21 * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat1.x * 6.0;
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat8.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat23 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD3.xyz;
					    u_xlat23 = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat23)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat1.x);
					    u_xlat16_1 = u_xlat10_4.w + -1.0;
					    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat16_1 + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat10_4.xyz * u_xlat1.xxx;
					    u_xlat4.xy = vec2(u_xlat21) * vec2(u_xlat21) + vec2(-1.0, 1.0);
					    u_xlat1.x = float(1.0) / u_xlat4.y;
					    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat1.x = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat1.x) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat8.xyz;
					    u_xlat1.w = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat1.xz = u_xlat1.xw * u_xlat1.xw;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = max(u_xlat1.z, 0.100000001);
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat21 * 4.0 + 2.0;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat21 = u_xlat21 / u_xlat1.x;
					    u_xlat1.xzw = vec3(u_xlat21) * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat8.x * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					float u_xlat15;
					float u_xlat21;
					float u_xlat23;
					float u_xlat24;
					void main()
					{
					    u_xlat10_0 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat1.xyz = max(u_xlat10_0.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat1.xyz = (-u_xlat10_0.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _MainLightShadowData.xxx * u_xlat1.xyz + u_xlat10_0.xyz;
					    u_xlat0.xyz = min(u_xlat10_0.xyz, u_xlat1.xyz);
					    u_xlat21 = (-_Smoothness) + 1.0;
					    u_xlat1.x = (-u_xlat21) * 0.699999988 + 1.70000005;
					    u_xlat1.x = u_xlat21 * u_xlat1.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat1.x * 6.0;
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat8.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat23 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat23 = inversesqrt(u_xlat23);
					    u_xlat3.xyz = vec3(u_xlat23) * vs_TEXCOORD3.xyz;
					    u_xlat23 = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat23)) + (-u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat1.x);
					    u_xlat16_1 = u_xlat10_4.w + -1.0;
					    u_xlat1.x = unity_SpecCube0_HDR.w * u_xlat16_1 + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_SpecCube0_HDR.x;
					    u_xlat9.xyz = u_xlat10_4.xyz * u_xlat1.xxx;
					    u_xlat4.xy = vec2(u_xlat21) * vec2(u_xlat21) + vec2(-1.0, 1.0);
					    u_xlat1.x = float(1.0) / u_xlat4.y;
					    u_xlat9.xyz = u_xlat9.xyz * u_xlat1.xxx;
					    u_xlat1.x = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat1.x) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat9.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat8.xyz;
					    u_xlat1.w = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat1.xz = u_xlat1.xw * u_xlat1.xw;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = max(u_xlat1.z, 0.100000001);
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat21 * 4.0 + 2.0;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat1.x = u_xlat15 * u_xlat1.x;
					    u_xlat21 = u_xlat21 / u_xlat1.x;
					    u_xlat1.xzw = vec3(u_xlat21) * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat8.x * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat1.xzw * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat16.xxx + _MainLightPosition.xyz;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat16.xxx) + (-u_xlat1.xyz);
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_16 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat25 = u_xlat25 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_16);
					    u_xlat7.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat2.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.y = clamp(u_xlat16.y, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16.xy = u_xlat16.xy * u_xlat16.xy;
					    u_xlat8.x = u_xlat16.y * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat0.y = u_xlat16.x * u_xlat8.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat24 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat24 = u_xlat25 * u_xlat24;
					    u_xlat2.xyz = vec3(u_xlat24) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat16.xxx + _MainLightPosition.xyz;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat3.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16.x = u_xlat16.x + u_xlat16.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat16.xxx) + (-u_xlat1.xyz);
					    u_xlat16.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat16.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_16 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat25 = u_xlat25 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_16);
					    u_xlat7.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat16.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16.x = max(u_xlat16.x, 1.17549435e-38);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat2.xyz = u_xlat16.xxx * u_xlat2.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat16.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat16.y = clamp(u_xlat16.y, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16.xy = u_xlat16.xy * u_xlat16.xy;
					    u_xlat8.x = u_xlat16.y * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat16.x = max(u_xlat16.x, 0.100000001);
					    u_xlat0.y = u_xlat16.x * u_xlat8.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat24 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat24 = u_xlat25 * u_xlat24;
					    u_xlat2.xyz = vec3(u_xlat24) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat23 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23 = u_xlat23 + u_xlat23;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat23)) + (-u_xlat3.xyz);
					    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
					    u_xlat23 = (-u_xlat23) + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat23) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat14.x;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * unity_LightData.z;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat25 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat25)) + (-u_xlat3.xyz);
					    u_xlat25 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = (-u_xlat25) + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat25) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat15.x;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * unity_LightData.z;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * unity_LightData.z;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * unity_LightData.z;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat5.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * unity_LightData.z;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat10_4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					float u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat6.xyz = max(u_xlat4.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat39 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat39)) + (-u_xlat3.xyz);
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat39) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat22.x;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat16;
					float u_xlat10_16;
					float u_xlat24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = max(u_xlat16, 1.17549435e-38);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + _MainLightPosition.xyz;
					    u_xlat16 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * vs_TEXCOORD3.xyz;
					    u_xlat16 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16 = u_xlat16 + u_xlat16;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat16)) + (-u_xlat1.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat25 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat10_16 * _MainLightShadowData.x + u_xlat25;
					    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat16 = (u_xlatb25) ? 1.0 : u_xlat16;
					    u_xlat25 = (-u_xlat16) + 1.0;
					    u_xlat26 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat26) * _MainLightColor.xyz;
					    u_xlat10_7 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat25) + u_xlat10_7.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_7.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 1.17549435e-38);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat8.x = u_xlat24 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.y = u_xlat25 * u_xlat8.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat25 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat16 = u_xlat16 * u_xlat25;
					    u_xlat16 = u_xlat26 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat16;
					float u_xlat10_16;
					float u_xlat24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = max(u_xlat16, 1.17549435e-38);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + _MainLightPosition.xyz;
					    u_xlat16 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * vs_TEXCOORD3.xyz;
					    u_xlat16 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16 = u_xlat16 + u_xlat16;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat16)) + (-u_xlat1.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat25 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat10_16 * _MainLightShadowData.x + u_xlat25;
					    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat16 = (u_xlatb25) ? 1.0 : u_xlat16;
					    u_xlat25 = (-u_xlat16) + 1.0;
					    u_xlat26 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat26) * _MainLightColor.xyz;
					    u_xlat10_7 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat25) + u_xlat10_7.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_7.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 1.17549435e-38);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat8.x = u_xlat24 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.y = u_xlat25 * u_xlat8.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat25 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat16 = u_xlat16 * u_xlat25;
					    u_xlat16 = u_xlat26 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0 * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0 * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat10_6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat10_6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat16_0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat16_6.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_0);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat16_0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat16_6.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_0);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat16_26;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat8.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat16.x * u_xlat8.x;
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * _MainLightColor.xyz;
					    u_xlat10_3 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat0.xxx + u_xlat10_3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat10_3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat10_3.xyz);
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat5.xyz = u_xlat1.xyz * (-u_xlat0.xxx) + (-u_xlat3.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = (-_Smoothness) + 1.0;
					    u_xlat26 = (-u_xlat25) * 0.699999988 + 1.70000005;
					    u_xlat26 = u_xlat25 * u_xlat26;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat26 = u_xlat26 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat26);
					    u_xlat16_26 = u_xlat10_3.w + -1.0;
					    u_xlat26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.y;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.x;
					    u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat26);
					    u_xlat5.xy = vec2(u_xlat25) * vec2(u_xlat25) + vec2(-1.0, 1.0);
					    u_xlat26 = float(1.0) / u_xlat5.y;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26);
					    u_xlat26 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat27 = (-u_xlat26) + _Smoothness;
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat27) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat1.x = u_xlat25 * 4.0 + 2.0;
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat9.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat16_26;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat8.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat16.x * u_xlat8.x;
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * _MainLightColor.xyz;
					    u_xlat10_3 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat0.xxx + u_xlat10_3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat10_3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat10_3.xyz);
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat5.xyz = u_xlat1.xyz * (-u_xlat0.xxx) + (-u_xlat3.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = (-_Smoothness) + 1.0;
					    u_xlat26 = (-u_xlat25) * 0.699999988 + 1.70000005;
					    u_xlat26 = u_xlat25 * u_xlat26;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat26 = u_xlat26 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat26);
					    u_xlat16_26 = u_xlat10_3.w + -1.0;
					    u_xlat26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.y;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.x;
					    u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat26);
					    u_xlat5.xy = vec2(u_xlat25) * vec2(u_xlat25) + vec2(-1.0, 1.0);
					    u_xlat26 = float(1.0) / u_xlat5.y;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26);
					    u_xlat26 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat27 = (-u_xlat26) + _Smoothness;
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat27) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat1.x = u_xlat25 * 4.0 + 2.0;
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat9.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1.x * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1.x + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = max(u_xlat25, 1.17549435e-38);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = max(u_xlat2.x, 0.100000001);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat5.x + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat2.x * u_xlat25;
					    u_xlat2.x = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat24 = u_xlat24 / u_xlat25;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat13.xyz + u_xlat6.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1.x * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1.x + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = max(u_xlat25, 1.17549435e-38);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = max(u_xlat2.x, 0.100000001);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat5.x + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat2.x * u_xlat25;
					    u_xlat2.x = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat24 = u_xlat24 / u_xlat25;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat13.xyz + u_xlat6.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat14.x * u_xlat21;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_5[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat10_14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat21 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat14.x = u_xlat10_14 * _MainLightShadowData.x + u_xlat21;
					    u_xlatb21 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat14.x = (u_xlatb21) ? 1.0 : u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat16;
					float u_xlat10_16;
					float u_xlat24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = max(u_xlat16, 1.17549435e-38);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + _MainLightPosition.xyz;
					    u_xlat16 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * vs_TEXCOORD3.xyz;
					    u_xlat16 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16 = u_xlat16 + u_xlat16;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat16)) + (-u_xlat1.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat25 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat10_16 * _MainLightShadowData.x + u_xlat25;
					    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat16 = (u_xlatb25) ? 1.0 : u_xlat16;
					    u_xlat25 = (-u_xlat16) + 1.0;
					    u_xlat26 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat26) * _MainLightColor.xyz;
					    u_xlat10_7 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat25) + u_xlat10_7.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_7.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 1.17549435e-38);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat8.x = u_xlat24 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.y = u_xlat25 * u_xlat8.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat25 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat16 = u_xlat16 * u_xlat25;
					    u_xlat16 = u_xlat26 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					float u_xlat16_8;
					float u_xlat16;
					float u_xlat10_16;
					float u_xlat24;
					float u_xlat25;
					bool u_xlatb25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat8.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat8.x = u_xlat8.x * u_xlat0.x;
					    u_xlat8.x = u_xlat8.x * 6.0;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = max(u_xlat16, 1.17549435e-38);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat16) + _MainLightPosition.xyz;
					    u_xlat16 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat3.xyz = vec3(u_xlat16) * vs_TEXCOORD3.xyz;
					    u_xlat16 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat16 = u_xlat16 + u_xlat16;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat16)) + (-u_xlat1.xyz);
					    u_xlat16 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat16) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat16 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat8.x);
					    u_xlat16_8 = u_xlat10_1.w + -1.0;
					    u_xlat8.x = unity_SpecCube0_HDR.w * u_xlat16_8 + 1.0;
					    u_xlat8.x = max(u_xlat8.x, 0.0);
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.y;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat8.xxx;
					    u_xlat8.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat24 = float(1.0) / u_xlat8.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24);
					    u_xlat24 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat25 = (-u_xlat24) + _Smoothness;
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat25) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat16) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat25 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat16 = u_xlat10_16 * _MainLightShadowData.x + u_xlat25;
					    u_xlatb25 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat16 = (u_xlatb25) ? 1.0 : u_xlat16;
					    u_xlat25 = (-u_xlat16) + 1.0;
					    u_xlat26 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat26) * _MainLightColor.xyz;
					    u_xlat10_7 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat25) + u_xlat10_7.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_7.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_7.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = max(u_xlat24, 1.17549435e-38);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat8.x = u_xlat24 * u_xlat8.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat0.y = u_xlat25 * u_xlat8.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat25 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat16 = u_xlat16 * u_xlat25;
					    u_xlat16 = u_xlat26 * u_xlat16;
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0 * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat10_0 * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat10_6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat10_6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat16_0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat16_6.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_0);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat16_0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat7.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_0 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat24 = dot(u_xlat7.xyz, u_xlat16_6.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat24) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_0);
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat6.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_6[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10_7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat14;
					float u_xlat10_14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat10_21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat16_23;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat14.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat15.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat15.xy;
					    u_xlat2.xy = u_xlat15.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat14.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat14.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat14.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat14.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat14.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat8.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat10.xyz = u_xlat3.zyw / u_xlat8.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat10.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat14.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat14.xy,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat8.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat10_21 + u_xlat1.x;
					    u_xlat14.x = u_xlat2.z * u_xlat10_14 + u_xlat21;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat14.x = u_xlat2.w * u_xlat10_21 + u_xlat14.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat8.yyzz * u_xlat5;
					    u_xlat21 = u_xlat8.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat14.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_14 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_7 + u_xlat0.x;
					    u_xlat0.x = u_xlat21 * u_xlat10_14 + u_xlat0.x;
					    u_xlat7.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat7.x;
					    u_xlatb7 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb7) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * unity_LightData.z;
					    u_xlat7.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat7.x = inversesqrt(u_xlat7.x);
					    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD3.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, _MainLightPosition.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xyz = u_xlat7.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = (-_Smoothness) + 1.0;
					    u_xlat2.x = (-u_xlat22) * 0.699999988 + 1.70000005;
					    u_xlat2.x = u_xlat22 * u_xlat2.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat2.x = u_xlat2.x * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat2.x);
					    u_xlat16_23 = u_xlat10_2.w + -1.0;
					    u_xlat23 = unity_SpecCube0_HDR.w * u_xlat16_23 + 1.0;
					    u_xlat23 = max(u_xlat23, 0.0);
					    u_xlat23 = log2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.y;
					    u_xlat23 = exp2(u_xlat23);
					    u_xlat23 = u_xlat23 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat23);
					    u_xlat4.xy = vec2(u_xlat22) * vec2(u_xlat22) + vec2(-1.0, 1.0);
					    u_xlat23 = float(1.0) / u_xlat4.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat23);
					    u_xlat23 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat24 = (-u_xlat23) + _Smoothness;
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat10_5 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat11.xyz = u_xlat10_5.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat11.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat24) + (-u_xlat11.xyz);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat11.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat10_5.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_5.w * _BaseColor.w;
					    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.y = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat7.x = max(u_xlat0.y, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat22 * 4.0 + 2.0;
					    u_xlat14.x = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x;
					    u_xlat0.x = u_xlat14.x / u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat5.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat16_26;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat8.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat16.x * u_xlat8.x;
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * _MainLightColor.xyz;
					    u_xlat10_3 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat0.xxx + u_xlat10_3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat10_3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat10_3.xyz);
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat5.xyz = u_xlat1.xyz * (-u_xlat0.xxx) + (-u_xlat3.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = (-_Smoothness) + 1.0;
					    u_xlat26 = (-u_xlat25) * 0.699999988 + 1.70000005;
					    u_xlat26 = u_xlat25 * u_xlat26;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat26 = u_xlat26 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat26);
					    u_xlat16_26 = u_xlat10_3.w + -1.0;
					    u_xlat26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.y;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.x;
					    u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat26);
					    u_xlat5.xy = vec2(u_xlat25) * vec2(u_xlat25) + vec2(-1.0, 1.0);
					    u_xlat26 = float(1.0) / u_xlat5.y;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26);
					    u_xlat26 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat27 = (-u_xlat26) + _Smoothness;
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat27) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat1.x = u_xlat25 * 4.0 + 2.0;
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat9.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					float u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat16_26;
					float u_xlat27;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1 * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat8.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat16.x = inversesqrt(u_xlat16.x);
					    u_xlat1.xyz = u_xlat16.xxx * vs_TEXCOORD3.xyz;
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat16.x * u_xlat8.x;
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat8.xyz = u_xlat8.xxx * _MainLightColor.xyz;
					    u_xlat10_3 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat0.xxx + u_xlat10_3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat10_3.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat10_3.xyz;
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat10_3.xyz);
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
					    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat5.xyz = u_xlat1.xyz * (-u_xlat0.xxx) + (-u_xlat3.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = (-_Smoothness) + 1.0;
					    u_xlat26 = (-u_xlat25) * 0.699999988 + 1.70000005;
					    u_xlat26 = u_xlat25 * u_xlat26;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat26 = u_xlat26 * 6.0;
					    u_xlat10_3 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat26);
					    u_xlat16_26 = u_xlat10_3.w + -1.0;
					    u_xlat26 = unity_SpecCube0_HDR.w * u_xlat16_26 + 1.0;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat26 = log2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.y;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat26 = u_xlat26 * unity_SpecCube0_HDR.x;
					    u_xlat3.xyz = u_xlat10_3.xyz * vec3(u_xlat26);
					    u_xlat5.xy = vec2(u_xlat25) * vec2(u_xlat25) + vec2(-1.0, 1.0);
					    u_xlat26 = float(1.0) / u_xlat5.y;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat26);
					    u_xlat26 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat27 = (-u_xlat26) + _Smoothness;
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat27) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.100000001);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat1.x = u_xlat25 * 4.0 + 2.0;
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat9.x / u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat8.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1.x * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1.x + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = max(u_xlat25, 1.17549435e-38);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = max(u_xlat2.x, 0.100000001);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat5.x + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat2.x * u_xlat25;
					    u_xlat2.x = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat24 = u_xlat24 / u_xlat25;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_8[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					float u_xlat10_0;
					vec4 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat10_8;
					bool u_xlatb8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat13;
					vec2 u_xlat16;
					float u_xlat16_16;
					float u_xlat10_16;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat10_24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat16.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat0.xy);
					    u_xlat1.xy = min(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat17.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * u_xlat1.xy + u_xlat17.xy;
					    u_xlat2.xy = u_xlat17.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.159999996, 0.159999996);
					    u_xlat3.xy = max(u_xlat16.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat16.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat3.xy = (-u_xlat3.xy) * u_xlat3.xy + u_xlat4.yw;
					    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5 = u_xlat4.xxzz * u_xlat4.xxzz;
					    u_xlat4.xy = u_xlat4.yw * vec2(0.159999996, 0.159999996);
					    u_xlat16.xy = u_xlat5.xz * vec2(0.5, 0.5) + (-u_xlat16.xy);
					    u_xlat2.zw = u_xlat5.wy * vec2(0.0799999982, 0.0799999982);
					    u_xlat5.xy = u_xlat16.xy * vec2(0.159999996, 0.159999996);
					    u_xlat1.z = u_xlat5.y;
					    u_xlat1.w = u_xlat4.y;
					    u_xlat5.w = u_xlat4.x;
					    u_xlat3.zw = u_xlat2.yz;
					    u_xlat9.xyz = u_xlat1.zyw + u_xlat3.zyw;
					    u_xlat5.z = u_xlat1.x;
					    u_xlat11.xyz = u_xlat3.zyw / u_xlat9.xyz;
					    u_xlat2.z = u_xlat3.x;
					    u_xlat3.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat3.xyz = u_xlat3.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat4.w = u_xlat3.x;
					    u_xlat5 = u_xlat2.zwxz + u_xlat5.zwxz;
					    u_xlat2.xyz = u_xlat2.xzw / u_xlat5.zwy;
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat4.xyz = u_xlat2.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.ywxw;
					    u_xlat16.xy = u_xlat0.xy * _MainLightShadowmapSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat16.xy,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat2 = u_xlat9.xxxy * u_xlat5.zwyz;
					    u_xlat1.x = u_xlat10_1.x * u_xlat2.y;
					    u_xlat24 = u_xlat2.x * u_xlat10_24 + u_xlat1.x;
					    u_xlat16.x = u_xlat2.z * u_xlat10_16 + u_xlat24;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat6 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat3.wywz;
					    u_xlat4.yw = u_xlat3.yz;
					    vec3 txVec3 = vec3(u_xlat6.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat6.zw,vs_TEXCOORD7.z);
					    u_xlat10_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat16.x = u_xlat2.w * u_xlat10_24 + u_xlat16.x;
					    u_xlat2 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xyzy;
					    u_xlat3 = u_xlat0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,vs_TEXCOORD7.z);
					    u_xlat10_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat2 = u_xlat9.yyzz * u_xlat5;
					    u_xlat24 = u_xlat9.z * u_xlat5.y;
					    u_xlat0.x = u_xlat2.x * u_xlat10_0 + u_xlat16.x;
					    u_xlat0.x = u_xlat2.y * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.z * u_xlat10_1.x + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat3.xy,vs_TEXCOORD7.z);
					    u_xlat10_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat3.zw,vs_TEXCOORD7.z);
					    u_xlat10_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.w * u_xlat10_8 + u_xlat0.x;
					    u_xlat0.x = u_xlat24 * u_xlat10_16 + u_xlat0.x;
					    u_xlat8.x = (-_MainLightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _MainLightShadowData.x + u_xlat8.x;
					    u_xlatb8 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat0.x = (u_xlatb8) ? 1.0 : u_xlat0.x;
					    u_xlat8.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16.xxx * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat8.xxx + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = max(u_xlat25, 1.17549435e-38);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat2.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = max(u_xlat2.x, 0.100000001);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat5.x + 1.00001001;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = u_xlat2.x * u_xlat25;
					    u_xlat2.x = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat24 = u_xlat24 / u_xlat25;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 unused_0_13[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 unused_0_13[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_15[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat33 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat33;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_15[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat33 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat33;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_15[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat33 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat33;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_15[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat33 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat33;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_6.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 unused_0_13[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 unused_0_13[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat33 = (-u_xlat23) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat33) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat33) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat28 = u_xlat32 * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat33 = (-u_xlat23) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat33) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat33) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat28 = u_xlat32 * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat33 = (-u_xlat23) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat33) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat28 = u_xlat32 * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat16;
					float u_xlat23;
					float u_xlat10_23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					bool u_xlatb32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_23 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat32 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat23 = u_xlat10_23 * _MainLightShadowData.x + u_xlat32;
					    u_xlatb32 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat23 = (u_xlatb32) ? 1.0 : u_xlat23;
					    u_xlat32 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat32) * _MainLightColor.xyz;
					    u_xlat33 = (-u_xlat23) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat33) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat28 = u_xlat23 * u_xlat14.x;
					    u_xlat28 = u_xlat32 * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_14[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					float u_xlat18;
					vec3 u_xlat20;
					vec2 u_xlat32;
					vec2 u_xlat33;
					vec2 u_xlat35;
					float u_xlat42;
					int u_xlati42;
					float u_xlat43;
					int u_xlati43;
					float u_xlat44;
					float u_xlat16_44;
					int u_xlati44;
					bool u_xlatb44;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat10_46;
					bool u_xlatb46;
					float u_xlat47;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat42 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat2.xyz = vec3(u_xlat42) * vs_TEXCOORD3.xyz;
					    u_xlat42 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * vs_TEXCOORD4.xyz;
					    u_xlat43 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat44 = (-u_xlat43) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat43 = u_xlat44 + 1.0;
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = (-_Smoothness) + 1.0;
					    u_xlat45 = u_xlat44 * u_xlat44;
					    u_xlat4 = u_xlat45 * u_xlat45;
					    u_xlat18 = u_xlat45 * 4.0 + 2.0;
					    u_xlat32.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat32.xy = floor(u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat32.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat33.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat35.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat35.xy = (-u_xlat35.xy) * u_xlat35.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat35.xy = u_xlat35.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat35.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat33.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat33.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat32.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat32.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_46 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat46 = u_xlat12.x * u_xlat10_46 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat46 = u_xlat12.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat46 = u_xlat12.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat46 = u_xlat13.x * u_xlat10_5.x + u_xlat46;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat46 = u_xlat13.y * u_xlat10_5.x + u_xlat46;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat46 = u_xlat13.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat46 = u_xlat13.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat32.x = u_xlat32.x * u_xlat10_5.x + u_xlat46;
					    u_xlat46 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat32.x = u_xlat32.x * _MainLightShadowData.x + u_xlat46;
					    u_xlatb46 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat32.x = (u_xlatb46) ? 1.0 : u_xlat32.x;
					    u_xlat46 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + (-u_xlat3.xyz);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat47 = (-u_xlat44) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat44 * u_xlat47;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat44);
					    u_xlat16_44 = u_xlat10_5.w + -1.0;
					    u_xlat44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat44 = log2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
					    u_xlat6.xy = vec2(u_xlat45) * vec2(u_xlat45) + vec2(-1.0, 1.0);
					    u_xlat44 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					    u_xlat20.xyz = (-u_xlat0.xyz) + vec3(u_xlat43);
					    u_xlat20.xyz = vec3(u_xlat46) * u_xlat20.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat20.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat43 = u_xlat32.x * unity_LightData.z;
					    u_xlat44 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat20.xyz = vec3(u_xlat43) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat42) + _MainLightPosition.xyz;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat43 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat42 = u_xlat42 * u_xlat6.x + 1.00001001;
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat43 = max(u_xlat43, 0.100000001);
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat42 = u_xlat18 * u_xlat42;
					    u_xlat42 = u_xlat4 / u_xlat42;
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat20.xyz + u_xlat5.xyz;
					    u_xlat42 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati42 = int(u_xlat42);
					    u_xlat20.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati42 ; u_xlati_loop_1++)
					    {
					        u_xlat44 = float(u_xlati_loop_1);
					        u_xlatb45 = u_xlat44<2.0;
					        u_xlat32.xy = (bool(u_xlatb45)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat47 = u_xlat44 + -2.0;
					        u_xlat44 = (u_xlatb45) ? u_xlat44 : u_xlat47;
					        u_xlatb44 = u_xlat44<1.0;
					        u_xlat44 = (u_xlatb44) ? u_xlat32.x : u_xlat32.y;
					        u_xlati44 = int(u_xlat44);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati44].xyz;
					        u_xlat45 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat45 = max(u_xlat45, 6.10351563e-05);
					        u_xlat32.x = inversesqrt(u_xlat45);
					        u_xlat8.xyz = u_xlat32.xxx * u_xlat7.xyz;
					        u_xlat46 = float(1.0) / u_xlat45;
					        u_xlat45 = u_xlat45 * _AdditionalLightsAttenuation[u_xlati44].x;
					        u_xlat45 = (-u_xlat45) * u_xlat45 + 1.0;
					        u_xlat45 = max(u_xlat45, 0.0);
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(_AdditionalLightsSpotDir[u_xlati44].xyz, u_xlat8.xyz);
					        u_xlat46 = u_xlat46 * _AdditionalLightsAttenuation[u_xlati44].z + _AdditionalLightsAttenuation[u_xlati44].w;
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat46 = u_xlat46 * u_xlat46;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat9.xyz = vec3(u_xlat45) * _AdditionalLightsColor[u_xlati44].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat32.xxx + u_xlat3.xyz;
					        u_xlat44 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat44 = max(u_xlat44, 1.17549435e-38);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz;
					        u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					        u_xlat45 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat44 = u_xlat44 * u_xlat6.x + 1.00001001;
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat45 = max(u_xlat45, 0.100000001);
					        u_xlat44 = u_xlat44 * u_xlat45;
					        u_xlat44 = u_xlat18 * u_xlat44;
					        u_xlat44 = u_xlat4 / u_xlat44;
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_14[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					float u_xlat18;
					vec3 u_xlat20;
					vec2 u_xlat32;
					vec2 u_xlat33;
					vec2 u_xlat35;
					float u_xlat42;
					int u_xlati42;
					float u_xlat43;
					int u_xlati43;
					float u_xlat44;
					float u_xlat16_44;
					int u_xlati44;
					bool u_xlatb44;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat10_46;
					bool u_xlatb46;
					float u_xlat47;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat42 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat2.xyz = vec3(u_xlat42) * vs_TEXCOORD3.xyz;
					    u_xlat42 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * vs_TEXCOORD4.xyz;
					    u_xlat43 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat44 = (-u_xlat43) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat43 = u_xlat44 + 1.0;
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = (-_Smoothness) + 1.0;
					    u_xlat45 = u_xlat44 * u_xlat44;
					    u_xlat4 = u_xlat45 * u_xlat45;
					    u_xlat18 = u_xlat45 * 4.0 + 2.0;
					    u_xlat32.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat32.xy = floor(u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat32.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat33.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat35.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat35.xy = (-u_xlat35.xy) * u_xlat35.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat35.xy = u_xlat35.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat35.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat33.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat33.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat32.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat32.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_46 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat46 = u_xlat12.x * u_xlat10_46 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat46 = u_xlat12.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat46 = u_xlat12.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat46 = u_xlat13.x * u_xlat10_5.x + u_xlat46;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat46 = u_xlat13.y * u_xlat10_5.x + u_xlat46;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat46 = u_xlat13.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat46 = u_xlat13.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat32.x = u_xlat32.x * u_xlat10_5.x + u_xlat46;
					    u_xlat46 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat32.x = u_xlat32.x * _MainLightShadowData.x + u_xlat46;
					    u_xlatb46 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat32.x = (u_xlatb46) ? 1.0 : u_xlat32.x;
					    u_xlat46 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + (-u_xlat3.xyz);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat47 = (-u_xlat44) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat44 * u_xlat47;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat44);
					    u_xlat16_44 = u_xlat10_5.w + -1.0;
					    u_xlat44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat44 = log2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
					    u_xlat6.xy = vec2(u_xlat45) * vec2(u_xlat45) + vec2(-1.0, 1.0);
					    u_xlat44 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					    u_xlat20.xyz = (-u_xlat0.xyz) + vec3(u_xlat43);
					    u_xlat20.xyz = vec3(u_xlat46) * u_xlat20.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat20.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat43 = u_xlat32.x * unity_LightData.z;
					    u_xlat44 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat20.xyz = vec3(u_xlat43) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat42) + _MainLightPosition.xyz;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat43 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat42 = u_xlat42 * u_xlat6.x + 1.00001001;
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat43 = max(u_xlat43, 0.100000001);
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat42 = u_xlat18 * u_xlat42;
					    u_xlat42 = u_xlat4 / u_xlat42;
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat20.xyz + u_xlat5.xyz;
					    u_xlat42 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati42 = int(u_xlat42);
					    u_xlat20.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati42 ; u_xlati_loop_1++)
					    {
					        u_xlat44 = float(u_xlati_loop_1);
					        u_xlatb45 = u_xlat44<2.0;
					        u_xlat32.xy = (bool(u_xlatb45)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat47 = u_xlat44 + -2.0;
					        u_xlat44 = (u_xlatb45) ? u_xlat44 : u_xlat47;
					        u_xlatb44 = u_xlat44<1.0;
					        u_xlat44 = (u_xlatb44) ? u_xlat32.x : u_xlat32.y;
					        u_xlati44 = int(u_xlat44);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati44].xyz;
					        u_xlat45 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat45 = max(u_xlat45, 6.10351563e-05);
					        u_xlat32.x = inversesqrt(u_xlat45);
					        u_xlat8.xyz = u_xlat32.xxx * u_xlat7.xyz;
					        u_xlat46 = float(1.0) / u_xlat45;
					        u_xlat45 = u_xlat45 * _AdditionalLightsAttenuation[u_xlati44].x;
					        u_xlat45 = (-u_xlat45) * u_xlat45 + 1.0;
					        u_xlat45 = max(u_xlat45, 0.0);
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(_AdditionalLightsSpotDir[u_xlati44].xyz, u_xlat8.xyz);
					        u_xlat46 = u_xlat46 * _AdditionalLightsAttenuation[u_xlati44].z + _AdditionalLightsAttenuation[u_xlati44].w;
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat46 = u_xlat46 * u_xlat46;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat9.xyz = vec3(u_xlat45) * _AdditionalLightsColor[u_xlati44].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat32.xxx + u_xlat3.xyz;
					        u_xlat44 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat44 = max(u_xlat44, 1.17549435e-38);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz;
					        u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					        u_xlat45 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat44 = u_xlat44 * u_xlat6.x + 1.00001001;
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat45 = max(u_xlat45, 0.100000001);
					        u_xlat44 = u_xlat44 * u_xlat45;
					        u_xlat44 = u_xlat18 * u_xlat44;
					        u_xlat44 = u_xlat4 / u_xlat44;
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_16[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6.x + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6.x + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6.x + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat50)) + (-u_xlat3.xyz);
					    u_xlat50 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat50 = (-u_xlat50) + 1.0;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat51 = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat51;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_6.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat50) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat47 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_16[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6.x + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6.x + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6.x + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat50)) + (-u_xlat3.xyz);
					    u_xlat50 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat50 = (-u_xlat50) + 1.0;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat51 = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat51;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_6.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat50) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat47 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_16[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					float u_xlat16_46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat46 = u_xlat46 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat46) * u_xlat10_5.xyz;
					    u_xlat16_46 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_46);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6.x + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6.x + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6.x + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat50)) + (-u_xlat3.xyz);
					    u_xlat50 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat50 = (-u_xlat50) + 1.0;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat51 = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat51;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_6.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat50) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat47 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_16[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					float u_xlat16_46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat46 = u_xlat46 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat46) * u_xlat10_5.xyz;
					    u_xlat16_46 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_46);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6.x + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6.x + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6.x + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6.x + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6.x + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat50 = u_xlat50 + u_xlat50;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat50)) + (-u_xlat3.xyz);
					    u_xlat50 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat50 = (-u_xlat50) + 1.0;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat50 = u_xlat50 * u_xlat50;
					    u_xlat51 = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat51;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_6.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat50) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat47 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_14[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					float u_xlat18;
					vec3 u_xlat20;
					vec2 u_xlat32;
					vec2 u_xlat33;
					vec2 u_xlat35;
					float u_xlat42;
					int u_xlati42;
					float u_xlat43;
					int u_xlati43;
					float u_xlat44;
					float u_xlat16_44;
					int u_xlati44;
					bool u_xlatb44;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat10_46;
					bool u_xlatb46;
					float u_xlat47;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat42 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat2.xyz = vec3(u_xlat42) * vs_TEXCOORD3.xyz;
					    u_xlat42 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * vs_TEXCOORD4.xyz;
					    u_xlat43 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat44 = (-u_xlat43) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat43 = u_xlat44 + 1.0;
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = (-_Smoothness) + 1.0;
					    u_xlat45 = u_xlat44 * u_xlat44;
					    u_xlat4 = u_xlat45 * u_xlat45;
					    u_xlat18 = u_xlat45 * 4.0 + 2.0;
					    u_xlat32.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat32.xy = floor(u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat32.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat33.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat35.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat35.xy = (-u_xlat35.xy) * u_xlat35.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat35.xy = u_xlat35.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat35.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat33.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat33.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat32.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat32.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_46 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat46 = u_xlat12.x * u_xlat10_46 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat46 = u_xlat12.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat46 = u_xlat12.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat46 = u_xlat13.x * u_xlat10_5.x + u_xlat46;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat46 = u_xlat13.y * u_xlat10_5.x + u_xlat46;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat46 = u_xlat13.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat46 = u_xlat13.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat32.x = u_xlat32.x * u_xlat10_5.x + u_xlat46;
					    u_xlat46 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat32.x = u_xlat32.x * _MainLightShadowData.x + u_xlat46;
					    u_xlatb46 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat32.x = (u_xlatb46) ? 1.0 : u_xlat32.x;
					    u_xlat46 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + (-u_xlat3.xyz);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat47 = (-u_xlat44) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat44 * u_xlat47;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat44);
					    u_xlat16_44 = u_xlat10_5.w + -1.0;
					    u_xlat44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat44 = log2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
					    u_xlat6.xy = vec2(u_xlat45) * vec2(u_xlat45) + vec2(-1.0, 1.0);
					    u_xlat44 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					    u_xlat20.xyz = (-u_xlat0.xyz) + vec3(u_xlat43);
					    u_xlat20.xyz = vec3(u_xlat46) * u_xlat20.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat20.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat43 = u_xlat32.x * unity_LightData.z;
					    u_xlat44 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat20.xyz = vec3(u_xlat43) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat42) + _MainLightPosition.xyz;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat43 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat42 = u_xlat42 * u_xlat6.x + 1.00001001;
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat43 = max(u_xlat43, 0.100000001);
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat42 = u_xlat18 * u_xlat42;
					    u_xlat42 = u_xlat4 / u_xlat42;
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat20.xyz + u_xlat5.xyz;
					    u_xlat42 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati42 = int(u_xlat42);
					    u_xlat20.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati42 ; u_xlati_loop_1++)
					    {
					        u_xlat44 = float(u_xlati_loop_1);
					        u_xlatb45 = u_xlat44<2.0;
					        u_xlat32.xy = (bool(u_xlatb45)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat47 = u_xlat44 + -2.0;
					        u_xlat44 = (u_xlatb45) ? u_xlat44 : u_xlat47;
					        u_xlatb44 = u_xlat44<1.0;
					        u_xlat44 = (u_xlatb44) ? u_xlat32.x : u_xlat32.y;
					        u_xlati44 = int(u_xlat44);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati44].xyz;
					        u_xlat45 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat45 = max(u_xlat45, 6.10351563e-05);
					        u_xlat32.x = inversesqrt(u_xlat45);
					        u_xlat8.xyz = u_xlat32.xxx * u_xlat7.xyz;
					        u_xlat46 = float(1.0) / u_xlat45;
					        u_xlat45 = u_xlat45 * _AdditionalLightsAttenuation[u_xlati44].x;
					        u_xlat45 = (-u_xlat45) * u_xlat45 + 1.0;
					        u_xlat45 = max(u_xlat45, 0.0);
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(_AdditionalLightsSpotDir[u_xlati44].xyz, u_xlat8.xyz);
					        u_xlat46 = u_xlat46 * _AdditionalLightsAttenuation[u_xlati44].z + _AdditionalLightsAttenuation[u_xlati44].w;
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat46 = u_xlat46 * u_xlat46;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat9.xyz = vec3(u_xlat45) * _AdditionalLightsColor[u_xlati44].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat32.xxx + u_xlat3.xyz;
					        u_xlat44 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat44 = max(u_xlat44, 1.17549435e-38);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz;
					        u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					        u_xlat45 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat44 = u_xlat44 * u_xlat6.x + 1.00001001;
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat45 = max(u_xlat45, 0.100000001);
					        u_xlat44 = u_xlat44 * u_xlat45;
					        u_xlat44 = u_xlat18 * u_xlat44;
					        u_xlat44 = u_xlat4 / u_xlat44;
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_14[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					float u_xlat18;
					vec3 u_xlat20;
					vec2 u_xlat32;
					vec2 u_xlat33;
					vec2 u_xlat35;
					float u_xlat42;
					int u_xlati42;
					float u_xlat43;
					int u_xlati43;
					float u_xlat44;
					float u_xlat16_44;
					int u_xlati44;
					bool u_xlatb44;
					float u_xlat45;
					bool u_xlatb45;
					float u_xlat46;
					float u_xlat10_46;
					bool u_xlatb46;
					float u_xlat47;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat42 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat2.xyz = vec3(u_xlat42) * vs_TEXCOORD3.xyz;
					    u_xlat42 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat3.xyz = vec3(u_xlat42) * vs_TEXCOORD4.xyz;
					    u_xlat43 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat44 = (-u_xlat43) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat43) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat43 = u_xlat44 + 1.0;
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = (-_Smoothness) + 1.0;
					    u_xlat45 = u_xlat44 * u_xlat44;
					    u_xlat4 = u_xlat45 * u_xlat45;
					    u_xlat18 = u_xlat45 * 4.0 + 2.0;
					    u_xlat32.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat32.xy = floor(u_xlat32.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat32.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat33.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat35.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat35.xy = (-u_xlat35.xy) * u_xlat35.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat35.xy = u_xlat35.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat35.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat33.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat33.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat32.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat32.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat32.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_46 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat46 = u_xlat12.x * u_xlat10_46 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat46 = u_xlat12.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat46 = u_xlat12.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat46 = u_xlat13.x * u_xlat10_5.x + u_xlat46;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat46 = u_xlat13.y * u_xlat10_5.x + u_xlat46;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat46 = u_xlat13.z * u_xlat10_5.x + u_xlat46;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat46 = u_xlat13.w * u_xlat10_5.x + u_xlat46;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat32.x = u_xlat32.x * u_xlat10_5.x + u_xlat46;
					    u_xlat46 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat32.x = u_xlat32.x * _MainLightShadowData.x + u_xlat46;
					    u_xlatb46 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat32.x = (u_xlatb46) ? 1.0 : u_xlat32.x;
					    u_xlat46 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + (-u_xlat3.xyz);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat46 = (-u_xlat46) + 1.0;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat47 = (-u_xlat44) * 0.699999988 + 1.70000005;
					    u_xlat44 = u_xlat44 * u_xlat47;
					    u_xlat44 = u_xlat44 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat44);
					    u_xlat16_44 = u_xlat10_5.w + -1.0;
					    u_xlat44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat44 = log2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat44);
					    u_xlat6.xy = vec2(u_xlat45) * vec2(u_xlat45) + vec2(-1.0, 1.0);
					    u_xlat44 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44);
					    u_xlat20.xyz = (-u_xlat0.xyz) + vec3(u_xlat43);
					    u_xlat20.xyz = vec3(u_xlat46) * u_xlat20.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat20.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat43 = u_xlat32.x * unity_LightData.z;
					    u_xlat44 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat20.xyz = vec3(u_xlat43) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat42) + _MainLightPosition.xyz;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = max(u_xlat42, 1.17549435e-38);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat43 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat42 = u_xlat42 * u_xlat6.x + 1.00001001;
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat43 = max(u_xlat43, 0.100000001);
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat42 = u_xlat18 * u_xlat42;
					    u_xlat42 = u_xlat4 / u_xlat42;
					    u_xlat7.xyz = vec3(u_xlat42) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat20.xyz + u_xlat5.xyz;
					    u_xlat42 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati42 = int(u_xlat42);
					    u_xlat20.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati42 ; u_xlati_loop_1++)
					    {
					        u_xlat44 = float(u_xlati_loop_1);
					        u_xlatb45 = u_xlat44<2.0;
					        u_xlat32.xy = (bool(u_xlatb45)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat47 = u_xlat44 + -2.0;
					        u_xlat44 = (u_xlatb45) ? u_xlat44 : u_xlat47;
					        u_xlatb44 = u_xlat44<1.0;
					        u_xlat44 = (u_xlatb44) ? u_xlat32.x : u_xlat32.y;
					        u_xlati44 = int(u_xlat44);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati44].xyz;
					        u_xlat45 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat45 = max(u_xlat45, 6.10351563e-05);
					        u_xlat32.x = inversesqrt(u_xlat45);
					        u_xlat8.xyz = u_xlat32.xxx * u_xlat7.xyz;
					        u_xlat46 = float(1.0) / u_xlat45;
					        u_xlat45 = u_xlat45 * _AdditionalLightsAttenuation[u_xlati44].x;
					        u_xlat45 = (-u_xlat45) * u_xlat45 + 1.0;
					        u_xlat45 = max(u_xlat45, 0.0);
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(_AdditionalLightsSpotDir[u_xlati44].xyz, u_xlat8.xyz);
					        u_xlat46 = u_xlat46 * _AdditionalLightsAttenuation[u_xlati44].z + _AdditionalLightsAttenuation[u_xlati44].w;
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat46 = u_xlat46 * u_xlat46;
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat46 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					        u_xlat45 = u_xlat45 * u_xlat46;
					        u_xlat9.xyz = vec3(u_xlat45) * _AdditionalLightsColor[u_xlati44].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat32.xxx + u_xlat3.xyz;
					        u_xlat44 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat44 = max(u_xlat44, 1.17549435e-38);
					        u_xlat44 = inversesqrt(u_xlat44);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz;
					        u_xlat44 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
					        u_xlat45 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat44 = u_xlat44 * u_xlat6.x + 1.00001001;
					        u_xlat45 = u_xlat45 * u_xlat45;
					        u_xlat44 = u_xlat44 * u_xlat44;
					        u_xlat45 = max(u_xlat45, 0.100000001);
					        u_xlat44 = u_xlat44 * u_xlat45;
					        u_xlat44 = u_xlat18 * u_xlat44;
					        u_xlat44 = u_xlat4 / u_xlat44;
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_18[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6 + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6 + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6 + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat50) * _MainLightColor.xyz;
					    u_xlat51 = (-u_xlat35.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat51) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat7.x = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat7.x;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_7.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat51) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat46 = u_xlat50 * u_xlat46;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_18[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6 + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6 + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6 + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat50) * _MainLightColor.xyz;
					    u_xlat51 = (-u_xlat35.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat51) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat7.x = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat7.x;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_7.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat51) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat46 = u_xlat50 * u_xlat46;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_18[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					float u_xlat16_46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat46 = u_xlat46 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat46) * u_xlat10_5.xyz;
					    u_xlat16_46 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_46);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6 + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6 + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6 + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat50) * _MainLightColor.xyz;
					    u_xlat51 = (-u_xlat35.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat51) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat7.x = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat7.x;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_7.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat51) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat46 = u_xlat50 * u_xlat46;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						vec4 unused_0_18[86];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec3 u_xlat20;
					vec3 u_xlat22;
					vec2 u_xlat35;
					vec2 u_xlat36;
					vec2 u_xlat38;
					float u_xlat45;
					int u_xlati45;
					float u_xlat46;
					float u_xlat16_46;
					int u_xlati46;
					float u_xlat47;
					float u_xlat16_47;
					int u_xlati47;
					bool u_xlatb47;
					float u_xlat48;
					bool u_xlatb48;
					float u_xlat49;
					float u_xlat50;
					float u_xlat10_50;
					bool u_xlatb50;
					float u_xlat51;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat45 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat2.xyz = vec3(u_xlat45) * vs_TEXCOORD3.xyz;
					    u_xlat45 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat3.xyz = vec3(u_xlat45) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat46 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat46 = u_xlat46 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat46) * u_xlat10_5.xyz;
					    u_xlat16_46 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_46);
					    u_xlat46 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat47 = (-u_xlat46) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat46) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat46 = u_xlat47 + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat47 = (-_Smoothness) + 1.0;
					    u_xlat48 = u_xlat47 * u_xlat47;
					    u_xlat49 = u_xlat48 * u_xlat48;
					    u_xlat5 = u_xlat48 * 4.0 + 2.0;
					    u_xlat20.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat35.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat35.xy = floor(u_xlat35.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat35.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat36.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat38.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat38.xy = (-u_xlat38.xy) * u_xlat38.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat38.xy = u_xlat38.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat38.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat36.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat36.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat35.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat35.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat35.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_50 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat50 = u_xlat13.x * u_xlat10_50 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat50 = u_xlat13.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat50 = u_xlat13.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat50 = u_xlat14.x * u_xlat10_6 + u_xlat50;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat50 = u_xlat14.y * u_xlat10_6 + u_xlat50;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat50 = u_xlat14.z * u_xlat10_6 + u_xlat50;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat50 = u_xlat14.w * u_xlat10_6 + u_xlat50;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat35.x = u_xlat35.x * u_xlat10_6 + u_xlat50;
					    u_xlat50 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat35.x = u_xlat35.x * _MainLightShadowData.x + u_xlat50;
					    u_xlatb50 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat35.x = (u_xlatb50) ? 1.0 : u_xlat35.x;
					    u_xlat50 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat50) * _MainLightColor.xyz;
					    u_xlat51 = (-u_xlat35.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat51) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = (-u_xlat51) + 1.0;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat7.x = (-u_xlat47) * 0.699999988 + 1.70000005;
					    u_xlat47 = u_xlat47 * u_xlat7.x;
					    u_xlat47 = u_xlat47 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat47);
					    u_xlat16_47 = u_xlat10_7.w + -1.0;
					    u_xlat47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat47 = max(u_xlat47, 0.0);
					    u_xlat47 = log2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.y;
					    u_xlat47 = exp2(u_xlat47);
					    u_xlat47 = u_xlat47 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat47);
					    u_xlat7.xy = vec2(u_xlat48) * vec2(u_xlat48) + vec2(-1.0, 1.0);
					    u_xlat47 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47);
					    u_xlat22.xyz = (-u_xlat0.xyz) + vec3(u_xlat46);
					    u_xlat22.xyz = vec3(u_xlat51) * u_xlat22.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat22.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat46 = u_xlat35.x * u_xlat20.x;
					    u_xlat46 = u_xlat50 * u_xlat46;
					    u_xlat20.xyz = vec3(u_xlat46) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat45) + _MainLightPosition.xyz;
					    u_xlat45 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat45 = max(u_xlat45, 1.17549435e-38);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat6.xyz;
					    u_xlat45 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat46 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat45 = u_xlat45 * u_xlat7.x + 1.00001001;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45;
					    u_xlat46 = max(u_xlat46, 0.100000001);
					    u_xlat45 = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat5 * u_xlat45;
					    u_xlat45 = u_xlat49 / u_xlat45;
					    u_xlat6.xyz = vec3(u_xlat45) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat20.xyz + u_xlat4.xyz;
					    u_xlat45 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati45 = int(u_xlat45);
					    u_xlat20.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati45 ; u_xlati_loop_1++)
					    {
					        u_xlat47 = float(u_xlati_loop_1);
					        u_xlatb48 = u_xlat47<2.0;
					        u_xlat6.xy = (bool(u_xlatb48)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat36.x = u_xlat47 + -2.0;
					        u_xlat47 = (u_xlatb48) ? u_xlat47 : u_xlat36.x;
					        u_xlatb47 = u_xlat47<1.0;
					        u_xlat47 = (u_xlatb47) ? u_xlat6.x : u_xlat6.y;
					        u_xlati47 = int(u_xlat47);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati47].xyz;
					        u_xlat48 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat48 = max(u_xlat48, 6.10351563e-05);
					        u_xlat51 = inversesqrt(u_xlat48);
					        u_xlat22.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat48;
					        u_xlat48 = u_xlat48 * _AdditionalLightsAttenuation[u_xlati47].x;
					        u_xlat48 = (-u_xlat48) * u_xlat48 + 1.0;
					        u_xlat48 = max(u_xlat48, 0.0);
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati47].xyz, u_xlat22.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati47].z + _AdditionalLightsAttenuation[u_xlati47].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati47].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati47].y);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat22.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat48 = u_xlat48 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat48) * _AdditionalLightsColor[u_xlati47].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat51) + u_xlat3.xyz;
					        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat47 = max(u_xlat47, 1.17549435e-38);
					        u_xlat47 = inversesqrt(u_xlat47);
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat6.xyz;
					        u_xlat47 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					        u_xlat48 = dot(u_xlat22.xyz, u_xlat6.xyz);
					        u_xlat48 = clamp(u_xlat48, 0.0, 1.0);
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat47 = u_xlat47 * u_xlat7.x + 1.00001001;
					        u_xlat48 = u_xlat48 * u_xlat48;
					        u_xlat47 = u_xlat47 * u_xlat47;
					        u_xlat48 = max(u_xlat48, 0.100000001);
					        u_xlat47 = u_xlat47 * u_xlat48;
					        u_xlat47 = u_xlat5 * u_xlat47;
					        u_xlat47 = u_xlat49 / u_xlat47;
					        u_xlat6.xyz = vec3(u_xlat47) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat20.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat20.xyz;
					    }
					    SV_Target0.xyz = u_xlat20.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 unused_0_13;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 unused_0_13;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_15;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat36 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat36;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_15;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat36 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat36;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_15;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat36 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat36;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_15;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat36 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat36;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 unused_0_13;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 unused_0_13;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat10_24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_24 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat34 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat24.x = u_xlat10_24 * _MainLightShadowData.x + u_xlat34;
					    u_xlatb34 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat24.x = (u_xlatb34) ? 1.0 : u_xlat24.x;
					    u_xlat34 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat34)) + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = vec3(u_xlat34) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat16.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat31 = u_xlat24.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat5.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec1 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat35) * _MainLightColor.xyz;
					    u_xlat36 = (-u_xlat25) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat36) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat36) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat31 = u_xlat35 * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat35) * _MainLightColor.xyz;
					    u_xlat36 = (-u_xlat25) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat36) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat36) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat31 = u_xlat35 * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat35) * _MainLightColor.xyz;
					    u_xlat36 = (-u_xlat25) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat36) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat31 = u_xlat35 * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat25;
					float u_xlat10_25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
					    u_xlat10_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    u_xlat35 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat25 = u_xlat10_25 * _MainLightShadowData.x + u_xlat35;
					    u_xlatb35 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat25 = (u_xlatb35) ? 1.0 : u_xlat25;
					    u_xlat35 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat35) * _MainLightColor.xyz;
					    u_xlat36 = (-u_xlat25) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat36) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat36) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat31 = u_xlat25 * u_xlat15.x;
					    u_xlat31 = u_xlat35 * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec1 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat41;
					vec2 u_xlat43;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					float u_xlat10_58;
					int u_xlati58;
					bool u_xlatb58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat40.xy = floor(u_xlat40.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat40.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat41.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat43.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat43.xy = (-u_xlat43.xy) * u_xlat43.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat43.xy = u_xlat43.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat43.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat41.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat41.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat40.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat40.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_58 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat58 = u_xlat12.x * u_xlat10_58 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat58 = u_xlat12.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat58 = u_xlat12.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat58 = u_xlat13.x * u_xlat10_5.x + u_xlat58;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat58 = u_xlat13.y * u_xlat10_5.x + u_xlat58;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat58 = u_xlat13.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat58 = u_xlat13.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat40.x = u_xlat40.x * u_xlat10_5.x + u_xlat58;
					    u_xlat58 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * _MainLightShadowData.x + u_xlat58;
					    u_xlatb58 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat40.x = (u_xlatb58) ? 1.0 : u_xlat40.x;
					    u_xlat58 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat58 = u_xlat58 + u_xlat58;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat58)) + (-u_xlat3.xyz);
					    u_xlat58 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					    u_xlat58 = (-u_xlat58) + 1.0;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat59 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat59;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = vec3(u_xlat58) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = u_xlat40.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec9 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec11 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec12 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec13 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec14 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec15 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec16 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec17 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat41;
					vec2 u_xlat43;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					float u_xlat10_58;
					int u_xlati58;
					bool u_xlatb58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat40.xy = floor(u_xlat40.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat40.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat41.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat43.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat43.xy = (-u_xlat43.xy) * u_xlat43.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat43.xy = u_xlat43.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat43.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat41.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat41.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat40.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat40.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_58 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat58 = u_xlat12.x * u_xlat10_58 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat58 = u_xlat12.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat58 = u_xlat12.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat58 = u_xlat13.x * u_xlat10_5.x + u_xlat58;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat58 = u_xlat13.y * u_xlat10_5.x + u_xlat58;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat58 = u_xlat13.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat58 = u_xlat13.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat40.x = u_xlat40.x * u_xlat10_5.x + u_xlat58;
					    u_xlat58 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * _MainLightShadowData.x + u_xlat58;
					    u_xlatb58 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat40.x = (u_xlatb58) ? 1.0 : u_xlat40.x;
					    u_xlat58 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat58 = u_xlat58 + u_xlat58;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat58)) + (-u_xlat3.xyz);
					    u_xlat58 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					    u_xlat58 = (-u_xlat58) + 1.0;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat59 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat59;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = vec3(u_xlat58) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = u_xlat40.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec9 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec11 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec12 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec13 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec14 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec15 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec16 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec17 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6.x + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6.x + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6.x + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat57 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat57;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6.x + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6.x + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6.x + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat57 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat57;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6.x + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6.x + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6.x + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat57 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat57;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_17[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_19[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6.x * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6.x + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6.x + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6.x + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6.x + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6.x + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat6.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat57 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat57;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_6.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_6.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[158];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat41;
					vec2 u_xlat43;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					float u_xlat10_58;
					int u_xlati58;
					bool u_xlatb58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat40.xy = floor(u_xlat40.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat40.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat41.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat43.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat43.xy = (-u_xlat43.xy) * u_xlat43.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat43.xy = u_xlat43.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat43.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat41.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat41.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat40.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat40.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_58 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat58 = u_xlat12.x * u_xlat10_58 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat58 = u_xlat12.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat58 = u_xlat12.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat58 = u_xlat13.x * u_xlat10_5.x + u_xlat58;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat58 = u_xlat13.y * u_xlat10_5.x + u_xlat58;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat58 = u_xlat13.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat58 = u_xlat13.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat40.x = u_xlat40.x * u_xlat10_5.x + u_xlat58;
					    u_xlat58 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * _MainLightShadowData.x + u_xlat58;
					    u_xlatb58 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat40.x = (u_xlatb58) ? 1.0 : u_xlat40.x;
					    u_xlat58 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat58 = u_xlat58 + u_xlat58;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat58)) + (-u_xlat3.xyz);
					    u_xlat58 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					    u_xlat58 = (-u_xlat58) + 1.0;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat59 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat59;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = vec3(u_xlat58) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = u_xlat40.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec9 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec11 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec12 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec13 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec14 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec15 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec16 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec17 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[123];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat41;
					vec2 u_xlat43;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					float u_xlat10_58;
					int u_xlati58;
					bool u_xlatb58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat40.xy = floor(u_xlat40.xy);
					    u_xlat5.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat40.xy);
					    u_xlat6 = u_xlat5.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat7 = u_xlat6.xxzz * u_xlat6.xxzz;
					    u_xlat41.xy = u_xlat7.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat6.xz = u_xlat7.xz * vec2(0.5, 0.5) + (-u_xlat5.xy);
					    u_xlat7.xy = (-u_xlat5.xy) + vec2(1.0, 1.0);
					    u_xlat43.xy = min(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat43.xy = (-u_xlat43.xy) * u_xlat43.xy + u_xlat7.xy;
					    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + u_xlat6.yw;
					    u_xlat43.xy = u_xlat43.xy + vec2(1.0, 1.0);
					    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					    u_xlat8.xy = u_xlat6.xz * vec2(0.159999996, 0.159999996);
					    u_xlat9.xy = u_xlat7.xy * vec2(0.159999996, 0.159999996);
					    u_xlat7.xy = u_xlat43.xy * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat5.xy * vec2(0.159999996, 0.159999996);
					    u_xlat5.xy = u_xlat6.yw * vec2(0.159999996, 0.159999996);
					    u_xlat8.z = u_xlat7.x;
					    u_xlat8.w = u_xlat5.x;
					    u_xlat9.z = u_xlat10.x;
					    u_xlat9.w = u_xlat41.x;
					    u_xlat6 = u_xlat8.zwxz + u_xlat9.zwxz;
					    u_xlat7.z = u_xlat8.y;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat10.z = u_xlat9.y;
					    u_xlat10.w = u_xlat41.y;
					    u_xlat5.xyz = u_xlat7.zyw + u_xlat10.zyw;
					    u_xlat7.xyz = u_xlat9.xzw / u_xlat6.zwy;
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat10.zyw / u_xlat5.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat7.xyz = u_xlat7.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat8.xyz = u_xlat8.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat7.w = u_xlat8.x;
					    u_xlat9 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.ywxw;
					    u_xlat10.xy = u_xlat40.xy * _MainLightShadowmapSize.xy + u_xlat7.zw;
					    u_xlat8.w = u_xlat7.y;
					    u_xlat7.yw = u_xlat8.yz;
					    u_xlat11 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xyzy;
					    u_xlat8 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.wywz;
					    u_xlat7 = u_xlat40.xyxy * _MainLightShadowmapSize.xyxy + u_xlat7.xwzw;
					    u_xlat12 = u_xlat5.xxxy * u_xlat6.zwyz;
					    u_xlat13 = u_xlat5.yyzz * u_xlat6;
					    u_xlat40.x = u_xlat5.z * u_xlat6.y;
					    vec3 txVec0 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_58 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat5.x = u_xlat10_5.x * u_xlat12.y;
					    u_xlat58 = u_xlat12.x * u_xlat10_58 + u_xlat5.x;
					    vec3 txVec2 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat58 = u_xlat12.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec3 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat58 = u_xlat12.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec4 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat58 = u_xlat13.x * u_xlat10_5.x + u_xlat58;
					    vec3 txVec5 = vec3(u_xlat11.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat58 = u_xlat13.y * u_xlat10_5.x + u_xlat58;
					    vec3 txVec6 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat58 = u_xlat13.z * u_xlat10_5.x + u_xlat58;
					    vec3 txVec7 = vec3(u_xlat7.xy,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat58 = u_xlat13.w * u_xlat10_5.x + u_xlat58;
					    vec3 txVec8 = vec3(u_xlat7.zw,vs_TEXCOORD7.z);
					    u_xlat10_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat40.x = u_xlat40.x * u_xlat10_5.x + u_xlat58;
					    u_xlat58 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * _MainLightShadowData.x + u_xlat58;
					    u_xlatb58 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat40.x = (u_xlatb58) ? 1.0 : u_xlat40.x;
					    u_xlat58 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat58 = u_xlat58 + u_xlat58;
					    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat58)) + (-u_xlat3.xyz);
					    u_xlat58 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					    u_xlat58 = (-u_xlat58) + 1.0;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat58 = u_xlat58 * u_xlat58;
					    u_xlat59 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat59;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_5.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat10_5.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = vec3(u_xlat58) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat24.xyz;
					    u_xlat5.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat55 = u_xlat40.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat5.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec9 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec11 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec12 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec13 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec14 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec15 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec16 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec17 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6 + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6 + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6 + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat56) * _MainLightColor.xyz;
					    u_xlat57 = (-u_xlat39.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat57) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat57 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					    u_xlat57 = (-u_xlat57) + 1.0;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat57) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat52 = u_xlat56 * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6 + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6 + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6 + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat56) * _MainLightColor.xyz;
					    u_xlat57 = (-u_xlat39.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat57) + u_xlat10_4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat57 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					    u_xlat57 = (-u_xlat57) + 1.0;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat57) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat52 = u_xlat56 * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6 + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6 + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6 + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat56) * _MainLightColor.xyz;
					    u_xlat57 = (-u_xlat39.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat57) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat57 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					    u_xlat57 = (-u_xlat57) + 1.0;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat57) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat52 = u_xlat56 * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 _MainLightShadowmapSize;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
					uniform  sampler2D _MainLightShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					float u_xlat10_6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					vec2 u_xlat40;
					vec2 u_xlat42;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat10_56;
					bool u_xlatb56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);
					    u_xlat39.xy = floor(u_xlat39.xy);
					    u_xlat6.xy = vs_TEXCOORD7.xy * _MainLightShadowmapSize.zw + (-u_xlat39.xy);
					    u_xlat7 = u_xlat6.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat8 = u_xlat7.xxzz * u_xlat7.xxzz;
					    u_xlat40.xy = u_xlat8.yw * vec2(0.0799999982, 0.0799999982);
					    u_xlat7.xz = u_xlat8.xz * vec2(0.5, 0.5) + (-u_xlat6.xy);
					    u_xlat8.xy = (-u_xlat6.xy) + vec2(1.0, 1.0);
					    u_xlat42.xy = min(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat42.xy = (-u_xlat42.xy) * u_xlat42.xy + u_xlat8.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat6.xy = (-u_xlat6.xy) * u_xlat6.xy + u_xlat7.yw;
					    u_xlat42.xy = u_xlat42.xy + vec2(1.0, 1.0);
					    u_xlat6.xy = u_xlat6.xy + vec2(1.0, 1.0);
					    u_xlat9.xy = u_xlat7.xz * vec2(0.159999996, 0.159999996);
					    u_xlat10.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					    u_xlat8.xy = u_xlat42.xy * vec2(0.159999996, 0.159999996);
					    u_xlat11.xy = u_xlat6.xy * vec2(0.159999996, 0.159999996);
					    u_xlat6.xy = u_xlat7.yw * vec2(0.159999996, 0.159999996);
					    u_xlat9.z = u_xlat8.x;
					    u_xlat9.w = u_xlat6.x;
					    u_xlat10.z = u_xlat11.x;
					    u_xlat10.w = u_xlat40.x;
					    u_xlat7 = u_xlat9.zwxz + u_xlat10.zwxz;
					    u_xlat8.z = u_xlat9.y;
					    u_xlat8.w = u_xlat6.y;
					    u_xlat11.z = u_xlat10.y;
					    u_xlat11.w = u_xlat40.y;
					    u_xlat6.xyz = u_xlat8.zyw + u_xlat11.zyw;
					    u_xlat8.xyz = u_xlat10.xzw / u_xlat7.zwy;
					    u_xlat8.xyz = u_xlat8.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat9.xyz = u_xlat11.zyw / u_xlat6.xyz;
					    u_xlat9.xyz = u_xlat9.xyz + vec3(-2.5, -0.5, 1.5);
					    u_xlat8.xyz = u_xlat8.yxz * _MainLightShadowmapSize.xxx;
					    u_xlat9.xyz = u_xlat9.xyz * _MainLightShadowmapSize.yyy;
					    u_xlat8.w = u_xlat9.x;
					    u_xlat10 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.ywxw;
					    u_xlat11.xy = u_xlat39.xy * _MainLightShadowmapSize.xy + u_xlat8.zw;
					    u_xlat9.w = u_xlat8.y;
					    u_xlat8.yw = u_xlat9.yz;
					    u_xlat12 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xyzy;
					    u_xlat9 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat9.wywz;
					    u_xlat8 = u_xlat39.xyxy * _MainLightShadowmapSize.xyxy + u_xlat8.xwzw;
					    u_xlat13 = u_xlat6.xxxy * u_xlat7.zwyz;
					    u_xlat14 = u_xlat6.yyzz * u_xlat7;
					    u_xlat39.x = u_xlat6.z * u_xlat7.y;
					    vec3 txVec0 = vec3(u_xlat10.xy,vs_TEXCOORD7.z);
					    u_xlat10_56 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat10.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat10_6 * u_xlat13.y;
					    u_xlat56 = u_xlat13.x * u_xlat10_56 + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat11.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
					    u_xlat56 = u_xlat13.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec3 = vec3(u_xlat9.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
					    u_xlat56 = u_xlat13.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec4 = vec3(u_xlat12.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);
					    u_xlat56 = u_xlat14.x * u_xlat10_6 + u_xlat56;
					    vec3 txVec5 = vec3(u_xlat12.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);
					    u_xlat56 = u_xlat14.y * u_xlat10_6 + u_xlat56;
					    vec3 txVec6 = vec3(u_xlat9.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);
					    u_xlat56 = u_xlat14.z * u_xlat10_6 + u_xlat56;
					    vec3 txVec7 = vec3(u_xlat8.xy,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);
					    u_xlat56 = u_xlat14.w * u_xlat10_6 + u_xlat56;
					    vec3 txVec8 = vec3(u_xlat8.zw,vs_TEXCOORD7.z);
					    u_xlat10_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);
					    u_xlat39.x = u_xlat39.x * u_xlat10_6 + u_xlat56;
					    u_xlat56 = (-_MainLightShadowData.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * _MainLightShadowData.x + u_xlat56;
					    u_xlatb56 = 0.0>=vs_TEXCOORD7.z;
					    u_xlat39.x = (u_xlatb56) ? 1.0 : u_xlat39.x;
					    u_xlat56 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat56) * _MainLightColor.xyz;
					    u_xlat57 = (-u_xlat39.x) + 1.0;
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat57) + u_xlat4.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat4.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat6.xyz = u_xlat2.xyz * (-u_xlat6.xxx) + (-u_xlat3.xyz);
					    u_xlat57 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					    u_xlat57 = (-u_xlat57) + 1.0;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat57 = u_xlat57 * u_xlat57;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat57) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat52 = u_xlat39.x * u_xlat22.x;
					    u_xlat52 = u_xlat56 * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40.x = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40.x;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec9 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec9, 0.0);
					        vec3 txVec10 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec10, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec11 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec11, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec12 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec12, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec13 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec13, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec14 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec14, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec15 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec15, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec16 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec16, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec17 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec17, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					    u_xlati28 = unity_StereoEyeIndex;
					    u_xlat7.xy = u_xlat7.xy * unity_StereoScaleOffset[u_xlati28].xy + unity_StereoScaleOffset[u_xlati28].zw;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat16_18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_18 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_18);
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_8 = texture(_ScreenSpaceShadowmapTexture, u_xlat8.xy);
					    u_xlat16_28 = (-u_xlat10_8.x) + 1.0;
					    u_xlat7.xyz = (-u_xlat7.xyz) * vec3(u_xlat16_28) + u_xlat6.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_8.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					int u_xlati16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati16].xy + unity_StereoScaleOffset[u_xlati16].zw;
					    u_xlat10_0 = texture(_ScreenSpaceShadowmapTexture, u_xlat0.xy);
					    u_xlat16_8 = (-u_xlat10_0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16_8) + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat10_0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					int u_xlati21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlati21 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.xy * unity_StereoScaleOffset[u_xlati21].xy + unity_StereoScaleOffset[u_xlati21].zw;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					    u_xlati28 = unity_StereoEyeIndex;
					    u_xlat7.xy = u_xlat7.xy * unity_StereoScaleOffset[u_xlati28].xy + unity_StereoScaleOffset[u_xlati28].zw;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat16_18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_18 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_18);
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_8 = texture(_ScreenSpaceShadowmapTexture, u_xlat8.xy);
					    u_xlat16_28 = (-u_xlat10_8.x) + 1.0;
					    u_xlat7.xyz = (-u_xlat7.xyz) * vec3(u_xlat16_28) + u_xlat6.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_8.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					int u_xlati16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati16].xy + unity_StereoScaleOffset[u_xlati16].zw;
					    u_xlat10_0 = texture(_ScreenSpaceShadowmapTexture, u_xlat0.xy);
					    u_xlat16_8 = (-u_xlat10_0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16_8) + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat10_0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = u_xlat10_6.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = u_xlat10_6.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					    u_xlati28 = unity_StereoEyeIndex;
					    u_xlat7.xy = u_xlat7.xy * unity_StereoScaleOffset[u_xlati28].xy + unity_StereoScaleOffset[u_xlati28].zw;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat16_18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_18 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_18);
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_8 = texture(_ScreenSpaceShadowmapTexture, u_xlat8.xy);
					    u_xlat16_28 = (-u_xlat10_8.x) + 1.0;
					    u_xlat7.xyz = (-u_xlat7.xyz) * vec3(u_xlat16_28) + u_xlat6.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_8.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					int u_xlati16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati16].xy + unity_StereoScaleOffset[u_xlati16].zw;
					    u_xlat10_0 = texture(_ScreenSpaceShadowmapTexture, u_xlat0.xy);
					    u_xlat16_8 = (-u_xlat10_0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16_8) + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat10_0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = u_xlat10_6.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat10_6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat21 = u_xlat10_2.x * u_xlat21;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat16_14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_14 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat22 = u_xlat22 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat22) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_14);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat14.x = u_xlat10_6.x * u_xlat14.x;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[296];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat22 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat7.x = u_xlat14.y * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = max(u_xlat14.x, 0.100000001);
					    u_xlat0.y = u_xlat14.x * u_xlat7.x;
					    u_xlat0.z = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_2 = texture(_ScreenSpaceShadowmapTexture, u_xlat2.xy);
					    u_xlat21 = u_xlat10_2.x * unity_LightData.z;
					    u_xlat21 = u_xlat22 * u_xlat21;
					    u_xlat2.xyz = vec3(u_xlat21) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_3[261];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_4[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					float u_xlat16_7;
					vec2 u_xlat14;
					float u_xlat21;
					float u_xlat22;
					int u_xlati22;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat7.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat7.x = u_xlat7.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * 6.0;
					    u_xlat14.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * u_xlat14.xxx + _MainLightPosition.xyz;
					    u_xlat14.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat3.xyz = u_xlat14.xxx * vs_TEXCOORD3.xyz;
					    u_xlat14.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat4.xyz = u_xlat3.xyz * (-u_xlat14.xxx) + (-u_xlat1.xyz);
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat14.x = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat7.x);
					    u_xlat16_7 = u_xlat10_1.w + -1.0;
					    u_xlat7.x = unity_SpecCube0_HDR.w * u_xlat16_7 + 1.0;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = log2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.y;
					    u_xlat7.x = exp2(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat7.xxx;
					    u_xlat7.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat21 = float(1.0) / u_xlat7.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat21);
					    u_xlat21 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat22 = (-u_xlat21) + _Smoothness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat22) + (-u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat14.xxx * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
					    u_xlati22 = unity_StereoEyeIndex;
					    u_xlat14.xy = u_xlat14.xy * unity_StereoScaleOffset[u_xlati22].xy + unity_StereoScaleOffset[u_xlati22].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat14.xy);
					    u_xlat14.x = u_xlat10_6.x * unity_LightData.z;
					    u_xlat21 = dot(u_xlat3.xyz, _MainLightPosition.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat14.x = u_xlat21 * u_xlat14.x;
					    u_xlat6.xyz = u_xlat14.xxx * _MainLightColor.xyz;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14.x = max(u_xlat14.x, 1.17549435e-38);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat2.xyz = u_xlat14.xxx * u_xlat2.xyz;
					    u_xlat14.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.y = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat14.y = clamp(u_xlat14.y, 0.0, 1.0);
					    u_xlat14.xy = u_xlat14.xy * u_xlat14.xy;
					    u_xlat0.w = max(u_xlat14.y, 0.100000001);
					    u_xlat7.x = u_xlat14.x * u_xlat7.x + 1.00001001;
					    u_xlat0.y = u_xlat7.x * u_xlat7.x;
					    u_xlat14.x = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat7.x = u_xlat14.x * u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat7.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat6.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
					    u_xlati28 = unity_StereoEyeIndex;
					    u_xlat7.xy = u_xlat7.xy * unity_StereoScaleOffset[u_xlati28].xy + unity_StereoScaleOffset[u_xlati28].zw;
					    u_xlat10_7 = texture(_ScreenSpaceShadowmapTexture, u_xlat7.xy);
					    u_xlat16_28 = (-u_xlat10_7.x) + 1.0;
					    u_xlat10_8 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat16_28) + u_xlat10_8.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat6.xyz = (-u_xlat10_8.xyz) + u_xlat6.xyz;
					    u_xlat6.xyz = _MainLightShadowData.xxx * u_xlat6.xyz + u_xlat10_8.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat10_8.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_7.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[208];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat16_6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					vec4 u_xlat10_8;
					vec3 u_xlat9;
					float u_xlat16_9;
					float u_xlat18;
					float u_xlat16_18;
					float u_xlat27;
					float u_xlat28;
					float u_xlat16_28;
					void main()
					{
					    u_xlat0.x = (-_Smoothness) + 1.0;
					    u_xlat9.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat9.x = u_xlat9.x * u_xlat0.x;
					    u_xlat9.x = u_xlat9.x * 6.0;
					    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat18 = max(u_xlat18, 1.17549435e-38);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;
					    u_xlat2.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat18) + _MainLightPosition.xyz;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD3.xyz;
					    u_xlat18 = dot((-u_xlat1.xyz), u_xlat3.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat4.xyz = u_xlat3.xyz * (-vec3(u_xlat18)) + (-u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.z = (-u_xlat18) + 1.0;
					    u_xlat0.xz = u_xlat0.xz * u_xlat0.xz;
					    u_xlat18 = u_xlat0.z * u_xlat0.z;
					    u_xlat10_1 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat9.x);
					    u_xlat16_9 = u_xlat10_1.w + -1.0;
					    u_xlat9.x = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = log2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat9.xxx;
					    u_xlat9.xz = u_xlat0.xx * u_xlat0.xx + vec2(-1.0, 1.0);
					    u_xlat27 = float(1.0) / u_xlat9.z;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat27);
					    u_xlat27 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat28 = (-u_xlat27) + _Smoothness;
					    u_xlat28 = u_xlat28 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat10_4 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat6.xyz = vec3(u_xlat28) + (-u_xlat5.xyz);
					    u_xlat6.xyz = vec3(u_xlat18) * u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz;
					    u_xlat10_6 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_6.xyz = u_xlat10_6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat16_18 = max(u_xlat10_6.w, 9.99999975e-05);
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat10_6 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat10_6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat16_18);
					    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat7.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_8 = texture(_ScreenSpaceShadowmapTexture, u_xlat8.xy);
					    u_xlat16_28 = (-u_xlat10_8.x) + 1.0;
					    u_xlat7.xyz = (-u_xlat7.xyz) * vec3(u_xlat16_28) + u_xlat6.xyz;
					    u_xlat7.xyz = max(u_xlat7.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat7.xyz = (-u_xlat6.xyz) + u_xlat7.xyz;
					    u_xlat7.xyz = _MainLightShadowData.xxx * u_xlat7.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = min(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat4.xyz = u_xlat10_4.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_4.w * _BaseColor.w;
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat9.x = u_xlat27 * u_xlat9.x + 1.00001001;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat0.y = u_xlat28 * u_xlat9.x;
					    u_xlat0.w = u_xlat0.x * 4.0 + 2.0;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x / u_xlat0.y;
					    u_xlat0.xyw = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat28 = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat28 = u_xlat10_8.x * u_xlat28;
					    u_xlat18 = u_xlat18 * u_xlat28;
					    u_xlat2.xyz = vec3(u_xlat18) * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat4.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 unused_0_5[173];
						vec4 _MainLightShadowData;
						vec4 unused_0_7[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unused_1_2[2];
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16_8;
					vec3 u_xlat13;
					float u_xlat16;
					float u_xlat16_16;
					int u_xlati16;
					float u_xlat24;
					float u_xlat25;
					float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlati16 = unity_StereoEyeIndex;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset[u_xlati16].xy + unity_StereoScaleOffset[u_xlati16].zw;
					    u_xlat10_0 = texture(_ScreenSpaceShadowmapTexture, u_xlat0.xy);
					    u_xlat16_8 = (-u_xlat10_0.x) + 1.0;
					    u_xlat10_1 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat16_16 = max(u_xlat10_1.w, 9.99999975e-05);
					    u_xlat16_1.xyz = u_xlat10_1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10_2 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat24 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD3.xyz;
					    u_xlat24 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat24 = u_xlat24 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat10_2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat16_16);
					    u_xlat16 = dot(_MainLightPosition.xyz, u_xlat3.xyz);
					    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat16) * _MainLightColor.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat16_8) + u_xlat1.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat2.xyz = _MainLightShadowData.xxx * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.xyz * u_xlat8.xxx + _MainLightPosition.xyz;
					    u_xlat8.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlat5.xyz = u_xlat3.xyz * (-u_xlat8.xxx) + (-u_xlat2.xyz);
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = (-u_xlat8.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.z = (-_Smoothness) + 1.0;
					    u_xlat25 = (-u_xlat8.z) * 0.699999988 + 1.70000005;
					    u_xlat25 = u_xlat8.z * u_xlat25;
					    u_xlat8.xz = u_xlat8.xz * u_xlat8.xz;
					    u_xlat25 = u_xlat25 * 6.0;
					    u_xlat10_2 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat25);
					    u_xlat16_25 = u_xlat10_2.w + -1.0;
					    u_xlat25 = unity_SpecCube0_HDR.w * u_xlat16_25 + 1.0;
					    u_xlat25 = max(u_xlat25, 0.0);
					    u_xlat25 = log2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.y;
					    u_xlat25 = exp2(u_xlat25);
					    u_xlat25 = u_xlat25 * unity_SpecCube0_HDR.x;
					    u_xlat2.xyz = u_xlat10_2.xyz * vec3(u_xlat25);
					    u_xlat5.xy = u_xlat8.zz * u_xlat8.zz + vec2(-1.0, 1.0);
					    u_xlat25 = float(1.0) / u_xlat5.y;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat26 = (-u_xlat25) + _Smoothness;
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat10_6 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    u_xlat13.xyz = u_xlat10_6.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat7.xyz = vec3(u_xlat26) + (-u_xlat13.xyz);
					    u_xlat7.xyz = u_xlat8.xxx * u_xlat7.xyz + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat10_6.xyz * _BaseColor.xyz;
					    SV_Target0.w = u_xlat10_6.w * _BaseColor.w;
					    u_xlat6.xyz = vec3(u_xlat25) * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat8.x = max(u_xlat8.x, 1.17549435e-38);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat4.xyz;
					    u_xlat8.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat25 = max(u_xlat25, 0.100000001);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat5.x + 1.00001001;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat25 * u_xlat8.x;
					    u_xlat25 = u_xlat8.z * 4.0 + 2.0;
					    u_xlat24 = u_xlat8.z * u_xlat8.z;
					    u_xlat8.x = u_xlat8.x * u_xlat25;
					    u_xlat8.x = u_xlat24 / u_xlat8.x;
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat13.xyz + u_xlat6.xyz;
					    u_xlat8.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat0.x = u_xlat10_0.x * u_xlat8.x;
					    u_xlat0.x = u_xlat16 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _MainLightColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = vs_TEXCOORD6.yzw * u_xlat6.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat10_4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat10_4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat10_4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat10_4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[230];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[195];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat23.xxx) + (-u_xlat3.xyz);
					    u_xlat23.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat23.x = (-u_xlat23.x) + 1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat32 = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat32;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = u_xlat23.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat29 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[246];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[211];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + 1.0;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat10_4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat10_4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat10_4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat10_4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17[87];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec3 u_xlat8;
					int u_xlati8;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati27;
					float u_xlat28;
					float u_xlat16_28;
					int u_xlati28;
					float u_xlat29;
					float u_xlat16_29;
					int u_xlati29;
					bool u_xlatb29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat16_32;
					float u_xlat33;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
					    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat28 = u_xlat28 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat10_5.xyz;
					    u_xlat16_28 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_28);
					    u_xlat28 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat29 = (-u_xlat28) + _Smoothness;
					    u_xlat1.xyz = vec3(u_xlat28) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat28 = u_xlat29 + 1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = (-_Smoothness) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat5 = u_xlat30 * 4.0 + 2.0;
					    u_xlat14.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat23.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat23.xy = clamp(u_xlat23.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat23.xy = u_xlat23.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat23.xy);
					    u_xlat23.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat15.xyz = u_xlat23.xxx * _MainLightColor.xyz;
					    u_xlat16_32 = (-u_xlat10_6.x) + 1.0;
					    u_xlat15.xyz = (-u_xlat15.xyz) * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat15.xyz = max(u_xlat15.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat15.xyz = (-u_xlat4.xyz) + u_xlat15.xyz;
					    u_xlat15.xyz = _MainLightShadowData.xxx * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat15.xyz);
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat15.xyz = u_xlat2.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat7.x = (-u_xlat29) * 0.699999988 + 1.70000005;
					    u_xlat29 = u_xlat29 * u_xlat7.x;
					    u_xlat29 = u_xlat29 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat29);
					    u_xlat16_29 = u_xlat10_7.w + -1.0;
					    u_xlat29 = unity_SpecCube0_HDR.w * u_xlat16_29 + 1.0;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = log2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.y;
					    u_xlat29 = exp2(u_xlat29);
					    u_xlat29 = u_xlat29 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_7.xyz * vec3(u_xlat29);
					    u_xlat7.xy = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
					    u_xlat29 = float(1.0) / u_xlat7.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat29);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat28);
					    u_xlat16.xyz = vec3(u_xlat32) * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat28 = u_xlat14.x * u_xlat10_6.x;
					    u_xlat28 = u_xlat23.x * u_xlat28;
					    u_xlat14.xyz = vec3(u_xlat28) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = max(u_xlat27, 1.17549435e-38);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat27 * u_xlat7.x + 1.00001001;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat28 = max(u_xlat28, 0.100000001);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    u_xlat27 = u_xlat5 * u_xlat27;
					    u_xlat27 = u_xlat31 / u_xlat27;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat27 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati27 = int(u_xlat27);
					    u_xlat14.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati27 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = float(u_xlati_loop_1);
					        u_xlatb30 = u_xlat29<2.0;
					        u_xlat6.xy = (bool(u_xlatb30)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat24 = u_xlat29 + -2.0;
					        u_xlat29 = (u_xlatb30) ? u_xlat29 : u_xlat24;
					        u_xlatb29 = u_xlat29<1.0;
					        u_xlat29 = (u_xlatb29) ? u_xlat6.x : u_xlat6.y;
					        u_xlati29 = int(u_xlat29);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati29].xyz;
					        u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat30 = max(u_xlat30, 6.10351563e-05);
					        u_xlat33 = inversesqrt(u_xlat30);
					        u_xlat16.xyz = vec3(u_xlat33) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat30;
					        u_xlat30 = u_xlat30 * _AdditionalLightsAttenuation[u_xlati29].x;
					        u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati29].xyz, u_xlat16.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati29].z + _AdditionalLightsAttenuation[u_xlati29].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlati8 = int(_AdditionalLightsOcclusionProbes[u_xlati29].x);
					        u_xlat8.x = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati8]);
					        u_xlat8.x = max(u_xlat8.x, _AdditionalLightsOcclusionProbes[u_xlati29].y);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat16.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat30 = u_xlat30 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat30) * _AdditionalLightsColor[u_xlati29].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat3.xyz;
					        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat29 = max(u_xlat29, 1.17549435e-38);
					        u_xlat29 = inversesqrt(u_xlat29);
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat6.xyz;
					        u_xlat29 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat30 = dot(u_xlat16.xyz, u_xlat6.xyz);
					        u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat7.x + 1.00001001;
					        u_xlat30 = u_xlat30 * u_xlat30;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat30 = max(u_xlat30, 0.100000001);
					        u_xlat29 = u_xlat29 * u_xlat30;
					        u_xlat29 = u_xlat5 * u_xlat29;
					        u_xlat29 = u_xlat31 / u_xlat29;
					        u_xlat6.xyz = vec3(u_xlat29) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat14.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat14.xyz;
					    }
					    SV_Target0.xyz = u_xlat14.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25.x = u_xlat25.x + u_xlat25.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat25.xxx) + (-u_xlat3.xyz);
					    u_xlat25.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat25.x = (-u_xlat25.x) + 1.0;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = u_xlat25.xxx * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat25.xy = clamp(u_xlat25.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat25.xy = u_xlat25.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25.x = u_xlat25.x + u_xlat25.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat25.xxx) + (-u_xlat3.xyz);
					    u_xlat25.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat25.x = (-u_xlat25.x) + 1.0;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = u_xlat25.xxx * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25.x = u_xlat25.x + u_xlat25.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat25.xxx) + (-u_xlat3.xyz);
					    u_xlat25.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat25.x = (-u_xlat25.x) + 1.0;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = u_xlat25.xxx * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat25.xy = clamp(u_xlat25.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat25.xy = u_xlat25.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat25.x = u_xlat25.x + u_xlat25.x;
					    u_xlat16.xyz = u_xlat2.xyz * (-u_xlat25.xxx) + (-u_xlat3.xyz);
					    u_xlat25.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat25.x = (-u_xlat25.x) + 1.0;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat25.x = u_xlat25.x * u_xlat25.x;
					    u_xlat35 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat35;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = u_xlat25.xxx * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec2 u_xlat24;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat10_34;
					int u_xlati34;
					float u_xlat35;
					bool u_xlatb35;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat4 = u_xlat33 * u_xlat33;
					    u_xlat14 = u_xlat33 * 4.0 + 2.0;
					    u_xlat24.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat24.xy = u_xlat24.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat24.xy);
					    u_xlat24.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat24.x = u_xlat24.x + u_xlat24.x;
					    u_xlat15.xyz = u_xlat2.xyz * (-u_xlat24.xxx) + (-u_xlat3.xyz);
					    u_xlat24.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat24.x = clamp(u_xlat24.x, 0.0, 1.0);
					    u_xlat24.x = (-u_xlat24.x) + 1.0;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat24.x = u_xlat24.x * u_xlat24.x;
					    u_xlat34 = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat34;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat15.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_6.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat15.xyz = u_xlat10_6.xyz * vec3(u_xlat32);
					    u_xlat6.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat6.y;
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat32);
					    u_xlat16.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat16.xyz = u_xlat24.xxx * u_xlat16.xyz + u_xlat0.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16.xyz;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat15.xyz;
					    u_xlat31 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat32 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat32;
					    u_xlat16.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat6.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat14 * u_xlat30;
					    u_xlat30 = u_xlat4 / u_xlat30;
					    u_xlat7.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat16.xyz + u_xlat15.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat16.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat24.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat35 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat35;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat24.x : u_xlat24.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat24.x = inversesqrt(u_xlat33);
					        u_xlat8.xyz = u_xlat24.xxx * u_xlat7.xyz;
					        u_xlat34 = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat8.xyz);
					        u_xlat34 = u_xlat34 * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlati34 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati34 + 1) / 4][(u_xlati34 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati34 / 4][u_xlati34 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati34 + 2) / 4][(u_xlati34 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati34 + 3) / 4][(u_xlati34 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        vec3 txVec0 = vec3(u_xlat9.xy,u_xlat9.z);
					        u_xlat10_34 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat35 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat34 = u_xlat10_34 * _AdditionalShadowStrength[u_xlati32] + u_xlat35;
					        u_xlatb35 = 0.0>=u_xlat9.z;
					        u_xlat34 = (u_xlatb35) ? 1.0 : u_xlat34;
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat34 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat34;
					        u_xlat9.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat24.xxx + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat7.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat6.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat14 * u_xlat32;
					        u_xlat32 = u_xlat4 / u_xlat32;
					        u_xlat7.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat16.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat16.xyz;
					    }
					    SV_Target0.xyz = u_xlat16.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat16_35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat16.xyz = u_xlat25.xxx * _MainLightColor.xyz;
					    u_xlat16_35 = (-u_xlat10_6.x) + 1.0;
					    u_xlat16.xyz = (-u_xlat16.xyz) * vec3(u_xlat16_35) + u_xlat10_4.xyz;
					    u_xlat16.xyz = max(u_xlat16.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat16.xyz = (-u_xlat10_4.xyz) + u_xlat16.xyz;
					    u_xlat16.xyz = _MainLightShadowData.xxx * u_xlat16.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat16.xyz);
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat16.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat31 = u_xlat25.x * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat16_35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat25.xy = clamp(u_xlat25.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat25.xy = u_xlat25.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat16.xyz = u_xlat25.xxx * _MainLightColor.xyz;
					    u_xlat16_35 = (-u_xlat10_6.x) + 1.0;
					    u_xlat16.xyz = (-u_xlat16.xyz) * vec3(u_xlat16_35) + u_xlat10_4.xyz;
					    u_xlat16.xyz = max(u_xlat16.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat16.xyz = (-u_xlat10_4.xyz) + u_xlat16.xyz;
					    u_xlat16.xyz = _MainLightShadowData.xxx * u_xlat16.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat16.xyz);
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat16.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat31 = u_xlat25.x * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat16_35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat16.xyz = u_xlat25.xxx * _MainLightColor.xyz;
					    u_xlat16_35 = (-u_xlat10_6.x) + 1.0;
					    u_xlat16.xyz = (-u_xlat16.xyz) * vec3(u_xlat16_35) + u_xlat4.xyz;
					    u_xlat16.xyz = max(u_xlat16.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat16.xyz = (-u_xlat4.xyz) + u_xlat16.xyz;
					    u_xlat16.xyz = _MainLightShadowData.xxx * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat16.xyz);
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat16.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat31 = u_xlat25.x * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[21];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					float u_xlat10_8;
					int u_xlati8;
					vec4 u_xlat9;
					vec3 u_xlat15;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					vec2 u_xlat25;
					float u_xlat26;
					float u_xlat30;
					int u_xlati30;
					float u_xlat31;
					float u_xlat16_31;
					int u_xlati31;
					float u_xlat32;
					float u_xlat16_32;
					int u_xlati32;
					bool u_xlatb32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat16_35;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
					    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat31 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat10_5.xyz;
					    u_xlat16_31 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_31);
					    u_xlat31 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat32 = (-u_xlat31) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat31 = u_xlat32 + _Smoothness;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat32 = (-_Smoothness) + 1.0;
					    u_xlat33 = u_xlat32 * u_xlat32;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat5 = u_xlat33 * 4.0 + 2.0;
					    u_xlat15.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat25.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat25.xy = clamp(u_xlat25.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat25.xy = u_xlat25.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat25.xy);
					    u_xlat25.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0);
					    u_xlat16.xyz = u_xlat25.xxx * _MainLightColor.xyz;
					    u_xlat16_35 = (-u_xlat10_6.x) + 1.0;
					    u_xlat16.xyz = (-u_xlat16.xyz) * vec3(u_xlat16_35) + u_xlat4.xyz;
					    u_xlat16.xyz = max(u_xlat16.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat16.xyz = (-u_xlat4.xyz) + u_xlat16.xyz;
					    u_xlat16.xyz = _MainLightShadowData.xxx * u_xlat16.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat16.xyz);
					    u_xlat35 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat16.xyz = u_xlat2.xyz * (-vec3(u_xlat35)) + (-u_xlat3.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);
					    u_xlat35 = (-u_xlat35) + 1.0;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat35 = u_xlat35 * u_xlat35;
					    u_xlat7.x = (-u_xlat32) * 0.699999988 + 1.70000005;
					    u_xlat32 = u_xlat32 * u_xlat7.x;
					    u_xlat32 = u_xlat32 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat16.xyz, u_xlat32);
					    u_xlat16_32 = u_xlat10_7.w + -1.0;
					    u_xlat32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = log2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat16.xyz = u_xlat10_7.xyz * vec3(u_xlat32);
					    u_xlat7.xy = vec2(u_xlat33) * vec2(u_xlat33) + vec2(-1.0, 1.0);
					    u_xlat32 = float(1.0) / u_xlat7.y;
					    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat32);
					    u_xlat17.xyz = (-u_xlat0.xyz) + vec3(u_xlat31);
					    u_xlat17.xyz = vec3(u_xlat35) * u_xlat17.xyz + u_xlat0.xyz;
					    u_xlat16.xyz = u_xlat16.xyz * u_xlat17.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat16.xyz;
					    u_xlat31 = u_xlat15.x * u_xlat10_6.x;
					    u_xlat31 = u_xlat25.x * u_xlat31;
					    u_xlat15.xyz = vec3(u_xlat31) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat30) + _MainLightPosition.xyz;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat30 = max(u_xlat30, 1.17549435e-38);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat31 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat30 * u_xlat7.x + 1.00001001;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat31 = max(u_xlat31, 0.100000001);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat5 * u_xlat30;
					    u_xlat30 = u_xlat34 / u_xlat30;
					    u_xlat6.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat30 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati30 = int(u_xlat30);
					    u_xlat15.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati30 ; u_xlati_loop_1++)
					    {
					        u_xlat32 = float(u_xlati_loop_1);
					        u_xlatb33 = u_xlat32<2.0;
					        u_xlat6.xy = (bool(u_xlatb33)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat26 = u_xlat32 + -2.0;
					        u_xlat32 = (u_xlatb33) ? u_xlat32 : u_xlat26;
					        u_xlatb32 = u_xlat32<1.0;
					        u_xlat32 = (u_xlatb32) ? u_xlat6.x : u_xlat6.y;
					        u_xlati32 = int(u_xlat32);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati32].xyz;
					        u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat33 = max(u_xlat33, 6.10351563e-05);
					        u_xlat36 = inversesqrt(u_xlat33);
					        u_xlat17.xyz = vec3(u_xlat36) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat33;
					        u_xlat33 = u_xlat33 * _AdditionalLightsAttenuation[u_xlati32].x;
					        u_xlat33 = (-u_xlat33) * u_xlat33 + 1.0;
					        u_xlat33 = max(u_xlat33, 0.0);
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati32].xyz, u_xlat17.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati32].z + _AdditionalLightsAttenuation[u_xlati32].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlati8 = u_xlati32 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					        u_xlat10_8 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        u_xlat18 = 1.0 + (-_AdditionalShadowStrength[u_xlati32]);
					        u_xlat8.x = u_xlat10_8 * _AdditionalShadowStrength[u_xlati32] + u_xlat18;
					        u_xlatb18 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb18) ? 1.0 : u_xlat8.x;
					        u_xlati18 = int(_AdditionalLightsOcclusionProbes[u_xlati32].x);
					        u_xlat18 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati18]);
					        u_xlat18 = max(u_xlat18, _AdditionalLightsOcclusionProbes[u_xlati32].y);
					        u_xlat33 = u_xlat33 * u_xlat18;
					        u_xlat33 = u_xlat8.x * u_xlat33;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat17.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat33 = u_xlat33 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat33) * _AdditionalLightsColor[u_xlati32].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat36) + u_xlat3.xyz;
					        u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat32 = max(u_xlat32, 1.17549435e-38);
					        u_xlat32 = inversesqrt(u_xlat32);
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat6.xyz;
					        u_xlat32 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					        u_xlat33 = dot(u_xlat17.xyz, u_xlat6.xyz);
					        u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat32 = u_xlat32 * u_xlat7.x + 1.00001001;
					        u_xlat33 = u_xlat33 * u_xlat33;
					        u_xlat32 = u_xlat32 * u_xlat32;
					        u_xlat33 = max(u_xlat33, 0.100000001);
					        u_xlat32 = u_xlat32 * u_xlat33;
					        u_xlat32 = u_xlat5 * u_xlat32;
					        u_xlat32 = u_xlat34 / u_xlat32;
					        u_xlat6.xyz = vec3(u_xlat32) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat15.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat15.xyz;
					    }
					    SV_Target0.xyz = u_xlat15.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat40.xy);
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_6.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_6.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat23.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat55 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat23.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat40.xy = clamp(u_xlat40.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat40.xy = u_xlat40.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat40.xy);
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_6.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_6.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat23.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat55 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat23.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39.x = u_xlat39.x + u_xlat39.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat39.xxx) + (-u_xlat3.xyz);
					    u_xlat39.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat39.x = (-u_xlat39.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = u_xlat39.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat39.xy = clamp(u_xlat39.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat39.xy = u_xlat39.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39.x = u_xlat39.x + u_xlat39.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat39.xxx) + (-u_xlat3.xyz);
					    u_xlat39.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat39.x = (-u_xlat39.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = u_xlat39.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[144];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39.x = u_xlat39.x + u_xlat39.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat39.xxx) + (-u_xlat3.xyz);
					    u_xlat39.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat39.x = (-u_xlat39.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = u_xlat39.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_13[109];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_15[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_17[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat39.xy = clamp(u_xlat39.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat39.xy = u_xlat39.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat39.x = u_xlat39.x + u_xlat39.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat39.xxx) + (-u_xlat3.xyz);
					    u_xlat39.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat39.x = (-u_xlat39.x) + 1.0;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat39.x = u_xlat39.x * u_xlat39.x;
					    u_xlat56 = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat56;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = u_xlat39.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat53 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					    u_xlat52 = u_xlat52 * u_xlat53;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[160];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat40.xy);
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_6.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_6.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat23.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat55 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat23.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_5[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_11[125];
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_13[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_15[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3[2];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_5[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat10_5;
					int u_xlati5;
					vec2 u_xlat6;
					vec4 u_xlat10_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					float u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					vec2 u_xlat40;
					vec2 u_xlat46;
					vec2 u_xlat48;
					float u_xlat54;
					int u_xlati54;
					float u_xlat55;
					int u_xlati55;
					float u_xlat56;
					float u_xlat16_56;
					int u_xlati56;
					bool u_xlatb56;
					float u_xlat57;
					bool u_xlatb57;
					float u_xlat58;
					int u_xlati58;
					float u_xlat59;
					float u_xlat10_59;
					bool u_xlatb59;
					float u_xlat61;
					float u_xlat10_61;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat54 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat2.xyz = vec3(u_xlat54) * vs_TEXCOORD3.xyz;
					    u_xlat54 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat3.xyz = vec3(u_xlat54) * vs_TEXCOORD4.xyz;
					    u_xlat55 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat56 = (-u_xlat55) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat55) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat55 = u_xlat56 + _Smoothness;
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat56 = (-_Smoothness) + 1.0;
					    u_xlat57 = u_xlat56 * u_xlat56;
					    u_xlat4 = u_xlat57 * u_xlat57;
					    u_xlat22 = u_xlat57 * 4.0 + 2.0;
					    u_xlat40.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat40.xy = clamp(u_xlat40.xy, 0.0, 1.0);
					    u_xlati5 = unity_StereoEyeIndex;
					    u_xlat40.xy = u_xlat40.xy * unity_StereoScaleOffset[u_xlati5].xy + unity_StereoScaleOffset[u_xlati5].zw;
					    u_xlat10_5 = texture(_ScreenSpaceShadowmapTexture, u_xlat40.xy);
					    u_xlat40.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat40.x = u_xlat40.x + u_xlat40.x;
					    u_xlat23.xyz = u_xlat2.xyz * (-u_xlat40.xxx) + (-u_xlat3.xyz);
					    u_xlat40.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat40.x = clamp(u_xlat40.x, 0.0, 1.0);
					    u_xlat40.x = (-u_xlat40.x) + 1.0;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat40.x = u_xlat40.x * u_xlat40.x;
					    u_xlat58 = (-u_xlat56) * 0.699999988 + 1.70000005;
					    u_xlat56 = u_xlat56 * u_xlat58;
					    u_xlat56 = u_xlat56 * 6.0;
					    u_xlat10_6 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat56);
					    u_xlat16_56 = u_xlat10_6.w + -1.0;
					    u_xlat56 = unity_SpecCube0_HDR.w * u_xlat16_56 + 1.0;
					    u_xlat56 = max(u_xlat56, 0.0);
					    u_xlat56 = log2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.y;
					    u_xlat56 = exp2(u_xlat56);
					    u_xlat56 = u_xlat56 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_6.xyz * vec3(u_xlat56);
					    u_xlat6.xy = vec2(u_xlat57) * vec2(u_xlat57) + vec2(-1.0, 1.0);
					    u_xlat56 = float(1.0) / u_xlat6.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat56);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat55);
					    u_xlat24.xyz = u_xlat40.xxx * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat23.xyz = vs_TEXCOORD1.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat55 = u_xlat10_5.x * unity_LightData.z;
					    u_xlat56 = dot(u_xlat2.xyz, _MainLightPosition.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat55 = u_xlat55 * u_xlat56;
					    u_xlat24.xyz = vec3(u_xlat55) * _MainLightColor.xyz;
					    u_xlat7.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat54) + _MainLightPosition.xyz;
					    u_xlat54 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat54 = max(u_xlat54, 1.17549435e-38);
					    u_xlat54 = inversesqrt(u_xlat54);
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat7.xyz;
					    u_xlat54 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					    u_xlat55 = dot(_MainLightPosition.xyz, u_xlat7.xyz);
					    u_xlat55 = clamp(u_xlat55, 0.0, 1.0);
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat54 = u_xlat54 * u_xlat6.x + 1.00001001;
					    u_xlat55 = u_xlat55 * u_xlat55;
					    u_xlat54 = u_xlat54 * u_xlat54;
					    u_xlat55 = max(u_xlat55, 0.100000001);
					    u_xlat54 = u_xlat54 * u_xlat55;
					    u_xlat54 = u_xlat22 * u_xlat54;
					    u_xlat54 = u_xlat4 / u_xlat54;
					    u_xlat7.xyz = vec3(u_xlat54) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat7.xyz * u_xlat24.xyz + u_xlat23.xyz;
					    u_xlat54 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati54 = int(u_xlat54);
					    u_xlat24.xyz = u_xlat5.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati54 ; u_xlati_loop_1++)
					    {
					        u_xlat56 = float(u_xlati_loop_1);
					        u_xlatb57 = u_xlat56<2.0;
					        u_xlat40.xy = (bool(u_xlatb57)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat59 = u_xlat56 + -2.0;
					        u_xlat56 = (u_xlatb57) ? u_xlat56 : u_xlat59;
					        u_xlatb56 = u_xlat56<1.0;
					        u_xlat56 = (u_xlatb56) ? u_xlat40.x : u_xlat40.y;
					        u_xlati56 = int(u_xlat56);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati56].xyz;
					        u_xlat57 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat57 = max(u_xlat57, 6.10351563e-05);
					        u_xlat40.x = inversesqrt(u_xlat57);
					        u_xlat8.xyz = u_xlat40.xxx * u_xlat7.xyz;
					        u_xlat58 = float(1.0) / u_xlat57;
					        u_xlat57 = u_xlat57 * _AdditionalLightsAttenuation[u_xlati56].x;
					        u_xlat57 = (-u_xlat57) * u_xlat57 + 1.0;
					        u_xlat57 = max(u_xlat57, 0.0);
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(_AdditionalLightsSpotDir[u_xlati56].xyz, u_xlat8.xyz);
					        u_xlat58 = u_xlat58 * _AdditionalLightsAttenuation[u_xlati56].z + _AdditionalLightsAttenuation[u_xlati56].w;
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat58 = u_xlat58 * u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlati58 = u_xlati56 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati58 + 1) / 4][(u_xlati58 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati58 / 4][u_xlati58 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati58 + 2) / 4][(u_xlati58 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat9 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati58 + 3) / 4][(u_xlati58 + 3) % 4];
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat9.www;
					        u_xlat10.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat10.xy = floor(u_xlat10.xy);
					        u_xlat9.xy = u_xlat9.xy * _AdditionalShadowmapSize.zw + (-u_xlat10.xy);
					        u_xlat11 = u_xlat9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat12 = u_xlat11.xxzz * u_xlat11.xxzz;
					        u_xlat46.xy = u_xlat12.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat11.xz = u_xlat12.xz * vec2(0.5, 0.5) + (-u_xlat9.xy);
					        u_xlat12.xy = (-u_xlat9.xy) + vec2(1.0, 1.0);
					        u_xlat48.xy = min(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat48.xy = (-u_xlat48.xy) * u_xlat48.xy + u_xlat12.xy;
					        u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
					        u_xlat9.xy = (-u_xlat9.xy) * u_xlat9.xy + u_xlat11.yw;
					        u_xlat48.xy = u_xlat48.xy + vec2(1.0, 1.0);
					        u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					        u_xlat13.xy = u_xlat11.xz * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat12.xy * vec2(0.159999996, 0.159999996);
					        u_xlat12.xy = u_xlat48.xy * vec2(0.159999996, 0.159999996);
					        u_xlat15.xy = u_xlat9.xy * vec2(0.159999996, 0.159999996);
					        u_xlat9.xy = u_xlat11.yw * vec2(0.159999996, 0.159999996);
					        u_xlat13.z = u_xlat12.x;
					        u_xlat13.w = u_xlat9.x;
					        u_xlat14.z = u_xlat15.x;
					        u_xlat14.w = u_xlat46.x;
					        u_xlat11 = u_xlat13.zwxz + u_xlat14.zwxz;
					        u_xlat12.z = u_xlat13.y;
					        u_xlat12.w = u_xlat9.y;
					        u_xlat15.z = u_xlat14.y;
					        u_xlat15.w = u_xlat46.y;
					        u_xlat9.xyw = u_xlat12.zyw + u_xlat15.zyw;
					        u_xlat12.xyz = u_xlat14.xzw / u_xlat11.zwy;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat13.xyz = u_xlat15.zyw / u_xlat9.xyw;
					        u_xlat13.xyz = u_xlat13.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat12.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat13.xyz = u_xlat13.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat12.w = u_xlat13.x;
					        u_xlat14 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.ywxw;
					        u_xlat46.xy = u_xlat10.xy * _AdditionalShadowmapSize.xy + u_xlat12.zw;
					        u_xlat13.w = u_xlat12.y;
					        u_xlat12.yw = u_xlat13.yz;
					        u_xlat15 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xyzy;
					        u_xlat13 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat13.wywz;
					        u_xlat12 = u_xlat10.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.xwzw;
					        u_xlat16 = u_xlat9.xxxy * u_xlat11.zwyz;
					        u_xlat17 = u_xlat9.yyww * u_xlat11;
					        u_xlat58 = u_xlat9.w * u_xlat11.y;
					        vec3 txVec0 = vec3(u_xlat14.xy,u_xlat9.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat14.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat61 = u_xlat10_61 * u_xlat16.y;
					        u_xlat59 = u_xlat16.x * u_xlat10_59 + u_xlat61;
					        vec3 txVec2 = vec3(u_xlat46.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat59 = u_xlat16.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec3 = vec3(u_xlat13.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat59 = u_xlat16.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec4 = vec3(u_xlat15.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat59 = u_xlat17.x * u_xlat10_61 + u_xlat59;
					        vec3 txVec5 = vec3(u_xlat15.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat59 = u_xlat17.y * u_xlat10_61 + u_xlat59;
					        vec3 txVec6 = vec3(u_xlat13.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat59 = u_xlat17.z * u_xlat10_61 + u_xlat59;
					        vec3 txVec7 = vec3(u_xlat12.xy,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat59 = u_xlat17.w * u_xlat10_61 + u_xlat59;
					        vec3 txVec8 = vec3(u_xlat12.zw,u_xlat9.z);
					        u_xlat10_61 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat58 = u_xlat58 * u_xlat10_61 + u_xlat59;
					        u_xlat59 = 1.0 + (-_AdditionalShadowStrength[u_xlati56]);
					        u_xlat58 = u_xlat58 * _AdditionalShadowStrength[u_xlati56] + u_xlat59;
					        u_xlatb59 = 0.0>=u_xlat9.z;
					        u_xlat58 = (u_xlatb59) ? 1.0 : u_xlat58;
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat58 = dot(u_xlat2.xyz, u_xlat8.xyz);
					        u_xlat58 = clamp(u_xlat58, 0.0, 1.0);
					        u_xlat57 = u_xlat57 * u_xlat58;
					        u_xlat9.xyz = vec3(u_xlat57) * _AdditionalLightsColor[u_xlati56].xyz;
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat40.xxx + u_xlat3.xyz;
					        u_xlat56 = dot(u_xlat7.xyz, u_xlat7.xyz);
					        u_xlat56 = max(u_xlat56, 1.17549435e-38);
					        u_xlat56 = inversesqrt(u_xlat56);
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat7.xyz;
					        u_xlat56 = dot(u_xlat2.xyz, u_xlat7.xyz);
					        u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					        u_xlat57 = dot(u_xlat8.xyz, u_xlat7.xyz);
					        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat56 = u_xlat56 * u_xlat6.x + 1.00001001;
					        u_xlat57 = u_xlat57 * u_xlat57;
					        u_xlat56 = u_xlat56 * u_xlat56;
					        u_xlat57 = max(u_xlat57, 0.100000001);
					        u_xlat56 = u_xlat56 * u_xlat57;
					        u_xlat56 = u_xlat22 * u_xlat56;
					        u_xlat56 = u_xlat4 / u_xlat56;
					        u_xlat7.xyz = vec3(u_xlat56) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat24.xyz = u_xlat7.xyz * u_xlat9.xyz + u_xlat24.xyz;
					    }
					    SV_Target0.xyz = u_xlat24.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat16_56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat23.xyz = u_xlat39.xxx * _MainLightColor.xyz;
					    u_xlat16_56 = (-u_xlat10_6.x) + 1.0;
					    u_xlat23.xyz = (-u_xlat23.xyz) * vec3(u_xlat16_56) + u_xlat10_4.xyz;
					    u_xlat23.xyz = max(u_xlat23.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat23.xyz = (-u_xlat10_4.xyz) + u_xlat23.xyz;
					    u_xlat23.xyz = _MainLightShadowData.xxx * u_xlat23.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat23.xyz);
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat23.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat52 = u_xlat39.x * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat16_56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat39.xy = clamp(u_xlat39.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat39.xy = u_xlat39.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat23.xyz = u_xlat39.xxx * _MainLightColor.xyz;
					    u_xlat16_56 = (-u_xlat10_6.x) + 1.0;
					    u_xlat23.xyz = (-u_xlat23.xyz) * vec3(u_xlat16_56) + u_xlat10_4.xyz;
					    u_xlat23.xyz = max(u_xlat23.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat23.xyz = (-u_xlat10_4.xyz) + u_xlat23.xyz;
					    u_xlat23.xyz = _MainLightShadowData.xxx * u_xlat23.xyz + u_xlat10_4.xyz;
					    u_xlat4.xyz = min(u_xlat10_4.xyz, u_xlat23.xyz);
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat23.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat52 = u_xlat39.x * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[142];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_2_0;
						vec4 _BaseColor;
						vec4 unused_2_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_2_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat16_56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat23.xyz = u_xlat39.xxx * _MainLightColor.xyz;
					    u_xlat16_56 = (-u_xlat10_6.x) + 1.0;
					    u_xlat23.xyz = (-u_xlat23.xyz) * vec3(u_xlat16_56) + u_xlat4.xyz;
					    u_xlat23.xyz = max(u_xlat23.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat23.xyz = (-u_xlat4.xyz) + u_xlat23.xyz;
					    u_xlat23.xyz = _MainLightShadowData.xxx * u_xlat23.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat23.xyz);
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat23.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat52 = u_xlat39.x * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "LIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" "_ADDITIONAL_LIGHTS" "_ADDITIONAL_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_MIXED_LIGHTING_SUBTRACTIVE" "_SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec4 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0;
						vec4 _SubtractiveShadowColor;
						vec4 unused_0_2[5];
						vec4 _MainLightPosition;
						vec4 _MainLightColor;
						vec4 _AdditionalLightsCount;
						vec4 _AdditionalLightsPosition[16];
						vec4 unused_0_7[15];
						vec4 _AdditionalLightsColor[16];
						vec4 unused_0_9[15];
						vec4 _AdditionalLightsAttenuation[16];
						vec4 unused_0_11[15];
						vec4 _AdditionalLightsSpotDir[16];
						vec4 unused_0_13[15];
						vec4 _AdditionalLightsOcclusionProbes[16];
						vec4 unused_0_15[107];
						vec4 _MainLightShadowData;
						vec4 unused_0_17;
						mat4x4 _AdditionalLightsWorldToShadow[16];
						vec4 unused_0_19[60];
						float _AdditionalShadowStrength[16];
						vec4 unused_0_21[19];
						vec4 _AdditionalShadowmapSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_1_0[10];
						vec4 unity_LightData;
						vec4 unity_LightIndices[2];
						vec4 unused_1_3;
						vec4 unity_ProbesOcclusion;
						vec4 unity_SpecCube0_HDR;
						vec4 unused_1_6[9];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[66];
						vec4 unity_StereoScaleOffset[2];
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_4_0;
						vec4 _BaseColor;
						vec4 unused_4_2[2];
						float _Smoothness;
						float _Metallic;
						vec4 unused_4_5;
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_LightmapInd;
					uniform  sampler2D _BaseMap;
					uniform  sampler2D _ScreenSpaceShadowmapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_AdditionalLightsShadowmapTexture;
					uniform  sampler2D _AdditionalLightsShadowmapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					float u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_6;
					int u_xlati6;
					vec2 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					int u_xlati8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec3 u_xlat22;
					vec3 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					float u_xlat10_25;
					int u_xlati25;
					bool u_xlatb25;
					vec2 u_xlat39;
					float u_xlat40;
					vec2 u_xlat43;
					vec2 u_xlat45;
					float u_xlat51;
					int u_xlati51;
					float u_xlat52;
					float u_xlat16_52;
					int u_xlati52;
					float u_xlat53;
					float u_xlat16_53;
					int u_xlati53;
					bool u_xlatb53;
					float u_xlat54;
					bool u_xlatb54;
					float u_xlat55;
					float u_xlat56;
					float u_xlat16_56;
					float u_xlat57;
					float u_xlat59;
					float u_xlat10_59;
					void main()
					{
						ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
						ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
						ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat10_0.w * _BaseColor.w;
					    u_xlat1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;
					    u_xlat51 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat2.xyz = vec3(u_xlat51) * vs_TEXCOORD3.xyz;
					    u_xlat51 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat3.xyz = vec3(u_xlat51) * vs_TEXCOORD4.xyz;
					    u_xlat10_4 = texture(unity_LightmapInd, vs_TEXCOORD1.xy);
					    u_xlat10_5 = texture(unity_Lightmap, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat52 = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat52 = u_xlat52 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat52) * u_xlat10_5.xyz;
					    u_xlat16_52 = max(u_xlat10_4.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat16_52);
					    u_xlat52 = (-_Metallic) * 0.959999979 + 0.959999979;
					    u_xlat53 = (-u_xlat52) + 1.0;
					    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
					    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat52 = u_xlat53 + _Smoothness;
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat53 = (-_Smoothness) + 1.0;
					    u_xlat54 = u_xlat53 * u_xlat53;
					    u_xlat55 = u_xlat54 * u_xlat54;
					    u_xlat5 = u_xlat54 * 4.0 + 2.0;
					    u_xlat22.x = unity_LightData.z * unity_ProbesOcclusion.x;
					    u_xlat39.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat39.xy = clamp(u_xlat39.xy, 0.0, 1.0);
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat39.xy = u_xlat39.xy * unity_StereoScaleOffset[u_xlati6].xy + unity_StereoScaleOffset[u_xlati6].zw;
					    u_xlat10_6 = texture(_ScreenSpaceShadowmapTexture, u_xlat39.xy);
					    u_xlat39.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);
					    u_xlat39.x = clamp(u_xlat39.x, 0.0, 1.0);
					    u_xlat23.xyz = u_xlat39.xxx * _MainLightColor.xyz;
					    u_xlat16_56 = (-u_xlat10_6.x) + 1.0;
					    u_xlat23.xyz = (-u_xlat23.xyz) * vec3(u_xlat16_56) + u_xlat4.xyz;
					    u_xlat23.xyz = max(u_xlat23.xyz, _SubtractiveShadowColor.xyz);
					    u_xlat23.xyz = (-u_xlat4.xyz) + u_xlat23.xyz;
					    u_xlat23.xyz = _MainLightShadowData.xxx * u_xlat23.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat23.xyz);
					    u_xlat56 = dot((-u_xlat3.xyz), u_xlat2.xyz);
					    u_xlat56 = u_xlat56 + u_xlat56;
					    u_xlat23.xyz = u_xlat2.xyz * (-vec3(u_xlat56)) + (-u_xlat3.xyz);
					    u_xlat56 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat56 = clamp(u_xlat56, 0.0, 1.0);
					    u_xlat56 = (-u_xlat56) + 1.0;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat56 = u_xlat56 * u_xlat56;
					    u_xlat7.x = (-u_xlat53) * 0.699999988 + 1.70000005;
					    u_xlat53 = u_xlat53 * u_xlat7.x;
					    u_xlat53 = u_xlat53 * 6.0;
					    u_xlat10_7 = textureLod(unity_SpecCube0, u_xlat23.xyz, u_xlat53);
					    u_xlat16_53 = u_xlat10_7.w + -1.0;
					    u_xlat53 = unity_SpecCube0_HDR.w * u_xlat16_53 + 1.0;
					    u_xlat53 = max(u_xlat53, 0.0);
					    u_xlat53 = log2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.y;
					    u_xlat53 = exp2(u_xlat53);
					    u_xlat53 = u_xlat53 * unity_SpecCube0_HDR.x;
					    u_xlat23.xyz = u_xlat10_7.xyz * vec3(u_xlat53);
					    u_xlat7.xy = vec2(u_xlat54) * vec2(u_xlat54) + vec2(-1.0, 1.0);
					    u_xlat53 = float(1.0) / u_xlat7.y;
					    u_xlat23.xyz = u_xlat23.xyz * vec3(u_xlat53);
					    u_xlat24.xyz = (-u_xlat0.xyz) + vec3(u_xlat52);
					    u_xlat24.xyz = vec3(u_xlat56) * u_xlat24.xyz + u_xlat0.xyz;
					    u_xlat23.xyz = u_xlat23.xyz * u_xlat24.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat52 = u_xlat22.x * u_xlat10_6.x;
					    u_xlat52 = u_xlat39.x * u_xlat52;
					    u_xlat22.xyz = vec3(u_xlat52) * _MainLightColor.xyz;
					    u_xlat6.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat51) + _MainLightPosition.xyz;
					    u_xlat51 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat51 = max(u_xlat51, 1.17549435e-38);
					    u_xlat51 = inversesqrt(u_xlat51);
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat6.xyz;
					    u_xlat51 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat52 = dot(_MainLightPosition.xyz, u_xlat6.xyz);
					    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat51 = u_xlat51 * u_xlat7.x + 1.00001001;
					    u_xlat52 = u_xlat52 * u_xlat52;
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = max(u_xlat52, 0.100000001);
					    u_xlat51 = u_xlat51 * u_xlat52;
					    u_xlat51 = u_xlat5 * u_xlat51;
					    u_xlat51 = u_xlat55 / u_xlat51;
					    u_xlat6.xyz = vec3(u_xlat51) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat6.xyz * u_xlat22.xyz + u_xlat4.xyz;
					    u_xlat51 = min(_AdditionalLightsCount.x, unity_LightData.y);
					    u_xlati51 = int(u_xlat51);
					    u_xlat22.xyz = u_xlat4.xyz;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati51 ; u_xlati_loop_1++)
					    {
					        u_xlat53 = float(u_xlati_loop_1);
					        u_xlatb54 = u_xlat53<2.0;
					        u_xlat6.xy = (bool(u_xlatb54)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;
					        u_xlat40 = u_xlat53 + -2.0;
					        u_xlat53 = (u_xlatb54) ? u_xlat53 : u_xlat40;
					        u_xlatb53 = u_xlat53<1.0;
					        u_xlat53 = (u_xlatb53) ? u_xlat6.x : u_xlat6.y;
					        u_xlati53 = int(u_xlat53);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _AdditionalLightsPosition[u_xlati53].xyz;
					        u_xlat54 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat54 = max(u_xlat54, 6.10351563e-05);
					        u_xlat57 = inversesqrt(u_xlat54);
					        u_xlat24.xyz = vec3(u_xlat57) * u_xlat6.xyz;
					        u_xlat8.x = float(1.0) / u_xlat54;
					        u_xlat54 = u_xlat54 * _AdditionalLightsAttenuation[u_xlati53].x;
					        u_xlat54 = (-u_xlat54) * u_xlat54 + 1.0;
					        u_xlat54 = max(u_xlat54, 0.0);
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.x = dot(_AdditionalLightsSpotDir[u_xlati53].xyz, u_xlat24.xyz);
					        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuation[u_xlati53].z + _AdditionalLightsAttenuation[u_xlati53].w;
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat8.x = u_xlat8.x * u_xlat8.x;
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlati8 = u_xlati53 << 2;
					        u_xlat9 = vs_TEXCOORD2.yyyy * _AdditionalLightsWorldToShadow[(u_xlati8 + 1) / 4][(u_xlati8 + 1) % 4];
					        u_xlat9 = _AdditionalLightsWorldToShadow[u_xlati8 / 4][u_xlati8 % 4] * vs_TEXCOORD2.xxxx + u_xlat9;
					        u_xlat9 = _AdditionalLightsWorldToShadow[(u_xlati8 + 2) / 4][(u_xlati8 + 2) % 4] * vs_TEXCOORD2.zzzz + u_xlat9;
					        u_xlat8 = u_xlat9 + _AdditionalLightsWorldToShadow[(u_xlati8 + 3) / 4][(u_xlati8 + 3) % 4];
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat8.www;
					        u_xlat9.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + vec2(0.5, 0.5);
					        u_xlat9.xy = floor(u_xlat9.xy);
					        u_xlat8.xy = u_xlat8.xy * _AdditionalShadowmapSize.zw + (-u_xlat9.xy);
					        u_xlat10 = u_xlat8.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					        u_xlat11 = u_xlat10.xxzz * u_xlat10.xxzz;
					        u_xlat43.xy = u_xlat11.yw * vec2(0.0799999982, 0.0799999982);
					        u_xlat10.xz = u_xlat11.xz * vec2(0.5, 0.5) + (-u_xlat8.xy);
					        u_xlat11.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					        u_xlat45.xy = min(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat45.xy = (-u_xlat45.xy) * u_xlat45.xy + u_xlat11.xy;
					        u_xlat8.xy = max(u_xlat8.xy, vec2(0.0, 0.0));
					        u_xlat8.xy = (-u_xlat8.xy) * u_xlat8.xy + u_xlat10.yw;
					        u_xlat45.xy = u_xlat45.xy + vec2(1.0, 1.0);
					        u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					        u_xlat12.xy = u_xlat10.xz * vec2(0.159999996, 0.159999996);
					        u_xlat13.xy = u_xlat11.xy * vec2(0.159999996, 0.159999996);
					        u_xlat11.xy = u_xlat45.xy * vec2(0.159999996, 0.159999996);
					        u_xlat14.xy = u_xlat8.xy * vec2(0.159999996, 0.159999996);
					        u_xlat8.xy = u_xlat10.yw * vec2(0.159999996, 0.159999996);
					        u_xlat12.z = u_xlat11.x;
					        u_xlat12.w = u_xlat8.x;
					        u_xlat13.z = u_xlat14.x;
					        u_xlat13.w = u_xlat43.x;
					        u_xlat10 = u_xlat12.zwxz + u_xlat13.zwxz;
					        u_xlat11.z = u_xlat12.y;
					        u_xlat11.w = u_xlat8.y;
					        u_xlat14.z = u_xlat13.y;
					        u_xlat14.w = u_xlat43.y;
					        u_xlat8.xyw = u_xlat11.zyw + u_xlat14.zyw;
					        u_xlat11.xyz = u_xlat13.xzw / u_xlat10.zwy;
					        u_xlat11.xyz = u_xlat11.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat12.xyz = u_xlat14.zyw / u_xlat8.xyw;
					        u_xlat12.xyz = u_xlat12.xyz + vec3(-2.5, -0.5, 1.5);
					        u_xlat11.xyz = u_xlat11.yxz * _AdditionalShadowmapSize.xxx;
					        u_xlat12.xyz = u_xlat12.xyz * _AdditionalShadowmapSize.yyy;
					        u_xlat11.w = u_xlat12.x;
					        u_xlat13 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.ywxw;
					        u_xlat43.xy = u_xlat9.xy * _AdditionalShadowmapSize.xy + u_xlat11.zw;
					        u_xlat12.w = u_xlat11.y;
					        u_xlat11.yw = u_xlat12.yz;
					        u_xlat14 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xyzy;
					        u_xlat12 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat12.wywz;
					        u_xlat11 = u_xlat9.xyxy * _AdditionalShadowmapSize.xyxy + u_xlat11.xwzw;
					        u_xlat15 = u_xlat8.xxxy * u_xlat10.zwyz;
					        u_xlat16 = u_xlat8.yyww * u_xlat10;
					        u_xlat8.x = u_xlat8.w * u_xlat10.y;
					        vec3 txVec0 = vec3(u_xlat13.xy,u_xlat8.z);
					        u_xlat10_25 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec0, 0.0);
					        vec3 txVec1 = vec3(u_xlat13.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec1, 0.0);
					        u_xlat59 = u_xlat10_59 * u_xlat15.y;
					        u_xlat25 = u_xlat15.x * u_xlat10_25 + u_xlat59;
					        vec3 txVec2 = vec3(u_xlat43.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec2, 0.0);
					        u_xlat25 = u_xlat15.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec3 = vec3(u_xlat12.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec3, 0.0);
					        u_xlat25 = u_xlat15.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec4 = vec3(u_xlat14.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec4, 0.0);
					        u_xlat25 = u_xlat16.x * u_xlat10_59 + u_xlat25;
					        vec3 txVec5 = vec3(u_xlat14.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec5, 0.0);
					        u_xlat25 = u_xlat16.y * u_xlat10_59 + u_xlat25;
					        vec3 txVec6 = vec3(u_xlat12.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec6, 0.0);
					        u_xlat25 = u_xlat16.z * u_xlat10_59 + u_xlat25;
					        vec3 txVec7 = vec3(u_xlat11.xy,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec7, 0.0);
					        u_xlat25 = u_xlat16.w * u_xlat10_59 + u_xlat25;
					        vec3 txVec8 = vec3(u_xlat11.zw,u_xlat8.z);
					        u_xlat10_59 = textureLod(hlslcc_zcmp_AdditionalLightsShadowmapTexture, txVec8, 0.0);
					        u_xlat8.x = u_xlat8.x * u_xlat10_59 + u_xlat25;
					        u_xlat25 = 1.0 + (-_AdditionalShadowStrength[u_xlati53]);
					        u_xlat8.x = u_xlat8.x * _AdditionalShadowStrength[u_xlati53] + u_xlat25;
					        u_xlatb25 = 0.0>=u_xlat8.z;
					        u_xlat8.x = (u_xlatb25) ? 1.0 : u_xlat8.x;
					        u_xlati25 = int(_AdditionalLightsOcclusionProbes[u_xlati53].x);
					        u_xlat25 = dot(unity_ProbesOcclusion, ImmCB_0_0_0[u_xlati25]);
					        u_xlat25 = max(u_xlat25, _AdditionalLightsOcclusionProbes[u_xlati53].y);
					        u_xlat54 = u_xlat54 * u_xlat25;
					        u_xlat54 = u_xlat8.x * u_xlat54;
					        u_xlat8.x = dot(u_xlat2.xyz, u_xlat24.xyz);
					        u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					        u_xlat54 = u_xlat54 * u_xlat8.x;
					        u_xlat8.xyz = vec3(u_xlat54) * _AdditionalLightsColor[u_xlati53].xyz;
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat57) + u_xlat3.xyz;
					        u_xlat53 = dot(u_xlat6.xyz, u_xlat6.xyz);
					        u_xlat53 = max(u_xlat53, 1.17549435e-38);
					        u_xlat53 = inversesqrt(u_xlat53);
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat6.xyz;
					        u_xlat53 = dot(u_xlat2.xyz, u_xlat6.xyz);
					        u_xlat53 = clamp(u_xlat53, 0.0, 1.0);
					        u_xlat54 = dot(u_xlat24.xyz, u_xlat6.xyz);
					        u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat53 = u_xlat53 * u_xlat7.x + 1.00001001;
					        u_xlat54 = u_xlat54 * u_xlat54;
					        u_xlat53 = u_xlat53 * u_xlat53;
					        u_xlat54 = max(u_xlat54, 0.100000001);
					        u_xlat53 = u_xlat53 * u_xlat54;
					        u_xlat53 = u_xlat5 * u_xlat53;
					        u_xlat53 = u_xlat55 / u_xlat53;
					        u_xlat6.xyz = vec3(u_xlat53) * u_xlat0.xyz + u_xlat1.xyz;
					        u_xlat22.xyz = u_xlat6.xyz * u_xlat8.xyz + u_xlat22.xyz;
					    }
					    SV_Target0.xyz = u_xlat22.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Cull Off
			GpuProgramID 90263
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[141];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_2[159];
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[16];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * _ShadowBias.y;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    gl_Position.z = min(u_xlat0.w, u_xlat0.z);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[269];
						vec4 _ShadowBias;
						vec3 _LightDirection;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[16];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_4_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * _ShadowBias.y;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    gl_Position.z = min(u_xlat0.w, u_xlat0.z);
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DepthOnly"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DepthOnly" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			ColorMask 0 -1
			Cull Off
			GpuProgramID 134581
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[141];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[20];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[20];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1) / 4][(u_xlati1 + 1) % 4];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1 / 4][u_xlati1 % 4] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2) / 4][(u_xlati1 + 2) % 4] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3) / 4][(u_xlati1 + 3) % 4] * u_xlat0.wwww + u_xlat2;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(location = 0) out vec4 SV_TARGET0;
					void main()
					{
					    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "Lightweight2D"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "Lightweight2D" "RenderPipeline" = "LightweightPipeline" "RenderType" = "Opaque" }
			Blend Zero Zero, Zero Zero
			ZWrite Off
			Cull Off
			GpuProgramID 302450
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[141];
						mat4x4 unity_MatrixVP;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[20];
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_2_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[20];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP[2];
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityPerMaterial {
						vec4 _BaseMap_ST;
						vec4 unused_3_1[5];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati6;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_ObjectToWorld[3].xyz;
					    u_xlati6 = unity_StereoEyeIndex << 2;
					    u_xlat1 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati6 + 1) / 4][(u_xlati6 + 1) % 4];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati6 / 4][u_xlati6 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati6 + 2) / 4][(u_xlati6 + 2) % 4] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_StereoMatrixVP[(u_xlati6 + 3) / 4][(u_xlati6 + 3) % 4];
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _BaseColor;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat10_0;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0 = u_xlat10_0 * _BaseColor;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerMaterial {
						vec4 unused_0_0;
						vec4 _BaseColor;
						vec4 unused_0_2[4];
					};
					uniform  sampler2D _BaseMap;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat10_0;
					void main()
					{
					    u_xlat10_0 = texture(_BaseMap, vs_TEXCOORD0.xy);
					    SV_Target0 = u_xlat10_0 * _BaseColor;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Hidden/InternalErrorShader"
	CustomEditor "UnityEditor.Rendering.LWRP.ShaderGUI.LitShader"
}